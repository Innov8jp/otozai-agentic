<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Otoz.ai - The Future of Cross-Border Vehicle Trading</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        @media (max-width: 480px) {
            .onboarding-container {
                padding: 5px;
            }
            
            .onboarding-title {
                font-size: 1.3rem;
            }
            
            .onboarding-subtitle {
                font-size: 0.8rem;
            }
            
            .preference-section {
                padding: 12px;
                border-radius: 15px;
            }
            
            .car-type-grid {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .car-type-card {
                padding: 12px;
            }
            
            .find-cars-btn {
                padding: 10px 25px;
                font-size: 0.9rem;
                border-radius: 25px;
            }
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: #0a0a0a;
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }

        /* Welcome Page Styles */
        .welcome-page {
            position: relative;
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
            overflow: hidden;
        }

        .welcome-page::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            animation: gridMove 20s linear infinite;
        }

        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(10px, 10px); }
        }

        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            pointer-events: none;
        }

        .floating-icon {
            position: absolute;
            font-size: 2rem;
            opacity: 0.1;
            animation: float 15s infinite linear;
        }

        @keyframes float {
            0% { transform: translateY(100vh) rotate(0deg); }
            100% { transform: translateY(-100px) rotate(360deg); }
        }

        .hero-content {
            text-align: center;
            max-width: 900px;
            z-index: 10;
            position: relative;
        }

        .company-logo {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
            animation: glow 2s ease-in-out infinite alternate;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        @keyframes glow {
            from { filter: drop-shadow(0 0 20px rgba(255,255,255,0.5)); }
            to { filter: drop-shadow(0 0 30px rgba(255,255,255,0.8)); }
        }

        .otoz-logo {
            width: 100px;
            height: 100px;
            filter: drop-shadow(0 0 20px rgba(255,255,255,0.3));
        }

        .tagline {
            font-size: 1.5rem;
            font-weight: 300;
            margin-bottom: 2rem;
            opacity: 0.9;
            letter-spacing: 0.5px;
        }

        .hero-description {
            font-size: 1.2rem;
            line-height: 1.8;
            margin-bottom: 3rem;
            opacity: 0.8;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Revolving Agent Hero Section - Centered */
        .agent-hero-container {
            position: relative;
            width: 500px;
            height: 500px;
            margin: 2rem auto 3rem auto;
            perspective: 1000px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .agent-carousel {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            animation: revolve 20s infinite linear;
        }

        @keyframes revolve {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(360deg); }
        }

        .agent-hero-card {
            position: absolute;
            width: 200px;
            height: 280px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 25px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            transform-style: preserve-3d;
            top: 50%;
            left: 50%;
            margin-top: -140px;
            margin-left: -100px;
        }

        .agent-hero-card:nth-child(1) {
            transform: rotateY(0deg) translateZ(250px);
        }

        .agent-hero-card:nth-child(2) {
            transform: rotateY(90deg) translateZ(250px);
        }

        .agent-hero-card:nth-child(3) {
            transform: rotateY(180deg) translateZ(250px);
        }

        .agent-hero-card:nth-child(4) {
            transform: rotateY(270deg) translateZ(250px);
        }

        .agent-hero-card:hover {
            transform: rotateY(var(--rotation)) translateZ(280px) scale(1.1);
            border-color: #fff;
            box-shadow: 0 20px 40px rgba(255,255,255,0.2);
        }

        /* Human Avatar Styles */
        .agent-big-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            margin-bottom: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            animation: pulse 2s infinite ease-in-out;
            border: 3px solid rgba(255,255,255,0.4);
            background-size: cover;
            background-position: center;
            position: relative;
            color: white;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0,0,0,0.5);
        }

        .sparky-avatar {
            background: linear-gradient(135deg, #fbbf24, #f59e0b), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="30" r="15" fill="white" opacity="0.9"/><circle cx="45" cy="27" r="2" fill="black"/><circle cx="55" cy="27" r="2" fill="black"/><path d="M45 35 Q50 40 55 35" stroke="black" stroke-width="2" fill="none"/><rect x="40" y="45" width="20" height="25" rx="5" fill="white" opacity="0.9"/><rect x="30" y="50" width="8" height="15" rx="4" fill="white" opacity="0.9"/><rect x="62" y="50" width="8" height="15" rx="4" fill="white" opacity="0.9"/><rect x="42" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/><rect x="52" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/></svg>');
        }

        .sparky-avatar::after {
            content: "üë®‚Äçüíº";
            font-size: 2.5rem;
        }

        .inspector-avatar {
            background: linear-gradient(135deg, #06b6d4, #0891b2), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="35" r="18" fill="white" opacity="0.9"/><circle cx="45" cy="30" r="2" fill="black"/><circle cx="55" cy="30" r="2" fill="black"/><path d="M45 40 Q50 45 55 40" stroke="black" stroke-width="2" fill="none"/><path d="M35 50 Q50 45 65 50 Q50 65 35 50" fill="white" opacity="0.9"/><rect x="42" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/><rect x="52" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/></svg>');
        }

        .inspector-avatar::after {
            content: "üë©‚Äçüî¨";
            font-size: 2.5rem;
        }

        .penny-avatar {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="35" r="18" fill="white" opacity="0.9"/><circle cx="45" cy="30" r="2" fill="black"/><circle cx="55" cy="30" r="2" fill="black"/><path d="M45 40 Q50 45 55 40" stroke="black" stroke-width="2" fill="none"/><path d="M35 50 Q50 45 65 50 Q50 65 35 50" fill="white" opacity="0.9"/><rect x="42" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/><rect x="52" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/></svg>');
        }

        .penny-avatar::after {
            content: "üë©‚Äçüíº";
            font-size: 2.5rem;
        }

        .captain-avatar {
            background: linear-gradient(135deg, #059669, #047857), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="30" r="15" fill="white" opacity="0.9"/><circle cx="45" cy="27" r="2" fill="black"/><circle cx="55" cy="27" r="2" fill="black"/><path d="M45 35 Q50 40 55 35" stroke="black" stroke-width="2" fill="none"/><rect x="40" y="45" width="20" height="25" rx="5" fill="white" opacity="0.9"/><rect x="30" y="50" width="8" height="15" rx="4" fill="white" opacity="0.9"/><rect x="62" y="50" width="8" height="15" rx="4" fill="white" opacity="0.9"/><rect x="42" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/><rect x="52" y="70" width="6" height="15" rx="3" fill="white" opacity="0.9"/></svg>');
        }

        .captain-avatar::after {
            content: "üë®‚Äç‚úàÔ∏è";
            font-size: 2.5rem;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .agent-hero-name {
            font-size: 1.4rem;
            font-weight: 800;
            color: white;
            margin-bottom: 8px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .agent-hero-role {
            font-size: 0.9rem;
            color: rgba(255,255,255,0.9);
            text-align: center;
            line-height: 1.3;
            font-weight: 500;
        }

        .game-start-controls {
            margin-top: 2rem;
            position: relative;
            z-index: 20;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2rem;
        }

        .start-game-btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            border: none;
            border-radius: 50px;
            padding: 20px 50px;
            font-size: 1.3rem;
            font-weight: 800;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 2px;
            box-shadow: 0 15px 35px rgba(255,107,107,0.4);
            position: relative;
            overflow: hidden;
            animation: startPulse 3s infinite ease-in-out;
        }

        .existing-customer-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
            border-radius: 50px;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: 700;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 10px 25px rgba(102,126,234,0.4);
            position: relative;
            overflow: hidden;
        }

        .existing-customer-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102,126,234,0.6);
        }

        @keyframes startPulse {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 15px 35px rgba(255,107,107,0.4);
            }
            50% { 
                transform: scale(1.05);
                box-shadow: 0 20px 45px rgba(255,107,107,0.6);
            }
        }

        .start-game-btn::before,
        .existing-customer-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            transition: left 0.5s;
        }

        .start-game-btn:hover::before,
        .existing-customer-btn:hover::before {
            left: 100%;
        }

        .start-game-btn:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 25px 50px rgba(255,107,107,0.7);
        }

        .agent-selection-hint {
            margin-top: 1rem;
            font-size: 1rem;
            color: rgba(255,255,255,0.7);
            animation: fadeInOut 4s infinite ease-in-out;
        }

        @keyframes fadeInOut {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        /* Mobile responsive for hero */
        @media (max-width: 768px) {
            .agent-hero-container {
                width: 300px;
                height: 300px;
                margin: 1rem auto 2rem auto;
            }
            
            .agent-carousel {
                animation: revolve 15s infinite linear;
            }
            
            .agent-hero-card {
                width: 140px;
                height: 200px;
                padding: 15px;
                margin-top: -100px;
                margin-left: -70px;
            }
            
            .agent-hero-card:nth-child(1) {
                transform: rotateY(0deg) translateZ(150px);
            }
            
            .agent-hero-card:nth-child(2) {
                transform: rotateY(90deg) translateZ(150px);
            }
            
            .agent-hero-card:nth-child(3) {
                transform: rotateY(180deg) translateZ(150px);
            }
            
            .agent-hero-card:nth-child(4) {
                transform: rotateY(270deg) translateZ(150px);
            }
            
            .agent-big-avatar {
                width: 60px;
                height: 60px;
                font-size: 1rem;
                margin-bottom: 10px;
            }
            
            .agent-big-avatar::after {
                font-size: 1.8rem;
            }
            
            .agent-hero-name {
                font-size: 1.1rem;
                margin-bottom: 5px;
            }
            
            .agent-hero-role {
                font-size: 0.75rem;
            }
            
            .start-game-btn {
                padding: 15px 35px;
                font-size: 1.1rem;
            }
            
            .existing-customer-btn {
                padding: 12px 30px;
                font-size: 1rem;
            }
        }

        .stats-container {
            display: flex;
            justify-content: center;
            gap: 3rem;
            margin: 2rem 0;
            flex-wrap: wrap;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 900;
            color: #fff;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.7;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Demo Container Styles - Fixed positioning and background */
        .demo-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: white;
            display: none;
            overflow: hidden;
            z-index: 1000;
        }

        .demo-container.active {
            display: flex;
        }

        /* Onboarding Styles */
        .onboarding-container {
            width: 100%;
            min-height: 100vh;
            max-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            padding: 20px;
            color: white;
            overflow-y: auto;
            overflow-x: hidden;
        }

        .onboarding-content {
            max-width: 800px;
            width: 100%;
            text-align: center;
            margin: auto 0;
            padding: 20px 0;
        }

        .onboarding-title {
            font-size: 2rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            line-height: 1.2;
        }

        .onboarding-subtitle {
            font-size: 1rem;
            opacity: 0.9;
            margin-bottom: 2rem;
            line-height: 1.4;
        }

        .preference-cards {
            display: grid;
            gap: 1.5rem;
            margin-bottom: 2rem;
            width: 100%;
        }

        .preference-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 20px;
            text-align: left;
            transition: all 0.3s ease;
            position: relative;
        }

        .preference-section.incomplete {
            border-color: #fbbf24;
            background: rgba(251, 191, 36, 0.1);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .preference-section.complete {
            border-color: #22c55e;
            background: rgba(34, 197, 94, 0.1);
        }

        .preference-section::before {
            content: '';
            position: absolute;
            top: 15px;
            right: 15px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .preference-section.complete::before {
            content: '‚úì';
            display: flex;
            align-items: center;
            justify-content: center;
            background: #22c55e;
            color: white;
            font-weight: bold;
            font-size: 12px;
            opacity: 1;
        }

        .preference-section.incomplete::before {
            content: '!';
            display: flex;
            align-items: center;
            justify-content: center;
            background: #fbbf24;
            color: white;
            font-weight: bold;
            font-size: 12px;
            opacity: 1;
        }

        .preference-title {
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 15px;
            color: white;
        }

        .car-type-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .car-type-card {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .car-type-card:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-5px);
        }

        .car-type-card.selected {
            background: rgba(255, 255, 255, 0.25);
            border-color: #fff;
            box-shadow: 0 10px 25px rgba(255,255,255,0.2);
        }

        .car-type-icon {
            font-size: 2.5rem;
            margin-bottom: 10px;
            display: block;
        }

        .car-type-name {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .range-slider-container {
            margin: 20px 0;
        }

        .range-labels {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .range-slider {
            width: 100%;
            height: 8px;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.3);
            outline: none;
            appearance: none;
            cursor: pointer;
        }

        .range-slider::-webkit-slider-thumb {
            appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: white;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        .range-slider::-moz-range-thumb {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: white;
            cursor: pointer;
            border: none;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        .range-value {
            text-align: center;
            font-size: 1.2rem;
            font-weight: 700;
            margin-top: 10px;
            color: white;
        }

        .other-input {
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            margin-top: 15px;
            outline: none;
            transition: all 0.3s ease;
        }

        .other-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .other-input:focus {
            border-color: white;
            background: rgba(255, 255, 255, 0.2);
        }

        .find-cars-btn {
            background: linear-gradient(45deg, #22c55e, #16a34a);
            border: none;
            border-radius: 50px;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: 700;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 10px 30px rgba(34,197,94,0.4);
            margin-top: 1rem;
            position: relative;
            overflow: hidden;
        }

        .find-cars-btn:disabled {
            background: linear-gradient(45deg, #94a3b8, #64748b);
            cursor: not-allowed;
            box-shadow: 0 10px 30px rgba(148,163,184,0.4);
        }

        .find-cars-btn:not(:disabled):hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(34,197,94,0.6);
        }

        .find-cars-btn.incomplete {
            background: linear-gradient(45deg, #f59e0b, #d97706);
            box-shadow: 0 10px 30px rgba(245,158,11,0.4);
        }

        .find-cars-btn.incomplete:hover {
            box-shadow: 0 15px 40px rgba(245,158,11,0.6);
        }

        .find-cars-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(34,197,94,0.6);
        }

        /* Car Discovery Styles */
        .car-discovery-container {
            width: 100%;
            height: 100%;
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            display: none;
            flex-direction: column;
            padding: 20px;
            color: white;
            overflow-y: auto;
        }

        .car-discovery-container.active {
            display: flex;
        }

        .discovery-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .discovery-title {
            font-size: 2rem;
            font-weight: 800;
            margin-bottom: 10px;
        }

        .discovery-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        /* Simple Car Card Styles for Dynamic Grid */
        .dynamic-car-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            width: 100%;
            max-width: 900px;
            margin: 0 auto; /* Center the grid */
            padding-bottom: 40px; /* Space for content below grid */
        }

        .simple-car-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            padding: 0;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            border: 3px solid transparent;
        }
        
        .simple-car-card:hover {
            transform: translateY(-5px);
            border-color: #667eea; /* Default hover color, can be customized per car */
        }

        .simple-car-card .car-header {
            height: 180px; /* Increased height for better image display */
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 3rem;
            position: relative;
            overflow: hidden; /* Ensure image doesn't spill */
        }

        .simple-car-card .car-header img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
            filter: brightness(0.8); /* Slightly darken image for text readability */
        }

        .simple-car-card .car-header span { /* Icon fallback */
            position: relative;
            z-index: 2;
        }

        .simple-car-card .price-trend-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(34, 197, 94, 0.9);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            z-index: 3;
        }

        .simple-car-card .price-trend-badge.down {
            background: rgba(239, 68, 68, 0.9);
        }

        .simple-car-card .car-info {
            padding: 20px;
            text-align: center;
            color: #1e293b;
        }

        .simple-car-card .car-info h3 {
            margin: 0 0 10px 0;
            font-size: 1.2rem;
            font-weight: 700;
        }

        .simple-car-card .car-info .specs {
            color: #64748b;
            font-size: 0.9rem;
            margin-bottom: 8px;
        }

        .simple-car-card .car-info .price {
            font-size: 1.8rem;
            font-weight: 900;
            color: #667eea; /* Default price color */
            margin: 15px 0;
        }

        /* Specific price colors for hover effect */
        .simple-car-card:hover .car-info .price.toyota { color: #667eea; }
        .simple-car-card:hover .car-info .price.honda { color: #22c55e; }
        .simple-car-card:hover .car-info .price.bmw { color: #f59e0b; }
        .simple-car-card:hover .car-info .price.ford { color: #3b82f6; }
        .simple-car-card:hover .car-info .price.mercedes { color: #a855f7; }
        .simple-car-card:hover .car-info .price.audi { color: #ef4444; }
        .simple-car-card:hover .car-info .price.lexus { color: #10b981; }
        .simple-car-card:hover .car-info .price.volkswagen { color: #f97316; }


        .simple-car-card .car-info .negotiate-badge {
            background: #f0f4ff;
            color: #4338ca;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            display: inline-block;
        }
        
        .car-discovery-container .back-to-preferences-btn {
            text-align: center; 
            margin-top: 20px;
        }


        /* Chat Interface Styles */
        .sidebar {
            width: 300px;
            background: #f8fafc;
            border-right: 1px solid #e2e8f0;
            padding: 30px 20px;
            display: flex;
            flex-direction: column;
        }

        .logo {
            font-size: 24px;
            font-weight: 800;
            color: #667eea;
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-logo {
            width: 35px;
            height: 35px;
        }

        .agent-status {
            margin-bottom: 30px;
        }

        .agent-card {
            background: white;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 15px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .agent-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            transition: left 0.5s;
        }

        .agent-card:hover::before {
            left: 100%;
        }

        .agent-card.active {
            border-color: #667eea;
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
        }

        .agent-card.completed {
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.05), rgba(22, 163, 74, 0.05));
            border-color: #22c55e;
        }

        .agent-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            margin-bottom: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border: 3px solid rgba(255,255,255,0.2);
        }

        .agent-name {
            font-weight: 700;
            font-size: 16px;
            margin-bottom: 5px;
            color: #1e293b;
        }

        .agent-role {
            font-size: 11px;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }

        .agent-tagline {
            font-size: 12px;
            color: #8b5cf6;
            font-style: italic;
            font-weight: 500;
        }

        .progress-bar {
            height: 4px;
            background: #e2e8f0;
            border-radius: 2px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.5s ease;
            border-radius: 2px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .header {
            padding: 20px 30px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
        }

        .demo-badge {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .back-btn {
            background: #f1f5f9;
            color: #334155;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .back-btn:hover {
            background: #e2e8f0;
        }

        .chat-area {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
            background: white;
        }

        .negotiation-phase {
            background: white;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e2e8f0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

        .selected-car-display {
            display: grid;
            grid-template-columns: 200px 1fr 150px;
            gap: 20px;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e2e8f0;
        }

        .selected-car-image {
            width: 200px;
            height: 120px;
            background: linear-gradient(45deg, #f3f4f6, #e5e7eb);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
        }

        .selected-car-info h3 {
            font-size: 1.3rem;
            margin-bottom: 10px;
            color: #1e293b;
        }

        .quick-specs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            font-size: 0.9rem;
            color: #64748b;
        }

        .price-display {
            text-align: right;
        }

        .current-price {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 5px;
        }

        .original-price {
            text-decoration: line-through;
            color: #94a3b8;
            font-size: 1rem;
        }

        .discount-badge {
            background: #22c55e;
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            margin-top: 5px;
            display: inline-block;
        }

        .chat-messages {
            flex: 1;
            max-height: 300px;
            overflow-y: auto;
            margin: 20px 0;
        }

        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
        }

        .message-content {
            background: #f1f5f9;
            padding: 12px 16px;
            border-radius: 16px;
            max-width: 70%;
            font-size: 14px;
            line-height: 1.4;
            color: #1e293b;
        }

        .message.user .message-content {
            background: #667eea;
            color: white;
        }

        .negotiation-info {
            background: #f0f4ff;
            border: 1px solid #c7d2fe;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 13px;
            color: #4338ca;
        }

        .price-range {
            display: flex;
            justify-content: space-between;
            margin-top: 8px;
            font-weight: 600;
        }

        .chat-input-container {
            display: flex;
            gap: 10px;
            padding: 15px 20px;
            border-top: 1px solid #e2e8f0;
            background: #f8fafc;
            border-radius: 0 0 16px 16px;
        }

        .chat-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 24px;
            font-size: 14px;
            outline: none;
            background: white;
            transition: border-color 0.2s ease;
            color: #1e293b;
        }

        .chat-input:focus {
            border-color: #667eea;
        }

        .send-btn {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            border: none;
            background: #667eea;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .send-btn:hover {
            background: #5a67d8;
            transform: scale(1.05);
        }

        .action-buttons {
            display: flex;
            gap: 12px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border-radius: 12px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .btn-secondary:hover {
            background: #667eea;
            color: white;
        }

        .btn-success {
            background: #22c55e;
            color: white;
        }

        .btn-success:hover {
            background: #16a34a;
        }

        /* Inspection Styles */
        .inspection-container {
            background: white;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e2e8f0;
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .inspection-container.active {
            display: block;
        }

        .inspection-header {
            text-align: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e2e8f0;
        }

        .inspection-header h3 {
            color: #1e293b;
            margin-bottom: 10px;
        }

        .inspection-checklist {
            margin: 25px 0;
        }

        .inspection-category {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            margin-bottom: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .inspection-category.checking {
            border-color: #fbbf24;
            background: #fffbeb;
            animation: pulse 2s infinite;
        }

        .inspection-category.completed {
            border-color: #22c55e;
            background: #f0fdf4;
        }

        .inspection-category-header {
            display: flex;
            align-items: center;
            padding: 15px;
            gap: 12px;
        }

        .inspection-icon {
            font-size: 1.2rem;
            width: 30px;
            text-align: center;
        }

        .inspection-category-name {
            flex: 1;
            font-weight: 600;
            color: #1e293b;
        }

        .inspection-status {
            font-size: 0.9rem;
            padding: 4px 8px;
            border-radius: 12px;
            background: #e2e8f0;
            color: #64748b;
        }

        .inspection-status.checking {
            background: #fef3c7;
            color: #92400e;
        }

        .inspection-status.completed {
            background: #dcfce7;
            color: #166534;
        }

        .inspection-details {
            padding: 0 15px 15px 57px;
            font-size: 0.85rem;
            color: #64748b;
            line-height: 1.4;
        }

        .inspection-progress {
            margin: 25px 0;
            text-align: center;
        }

        .progress-bar-container {
            position: relative;
            margin-bottom: 15px;
        }

        .inspection-progress-bar {
            width: 100%;
            height: 12px;
            background: #e2e8f0;
            border-radius: 6px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .inspection-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #06b6d4, #0891b2);
            border-radius: 6px;
            transition: width 0.5s ease;
            position: relative;
        }

        .inspection-progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .inspection-progress-text {
            font-weight: 600;
            color: #06b6d4;
            font-size: 1.1rem;
        }

        /* Invoice Styles */
        .invoice-container {
            background: white;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e2e8f0;
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .invoice-container.active {
            display: block;
        }

        .invoice-header {
            text-align: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e2e8f0;
        }

        .invoice-header h3 {
            color: #1e293b;
            margin-bottom: 10px;
        }

        .invoice-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 25px;
        }

        .detail-section h4 {
            color: #1e293b;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            color: #64748b;
            font-size: 14px;
        }

        .detail-item strong {
            color: #1e293b;
        }

        .total-section {
            background: #f8fafc;
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
        }

        .total-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .total-item.final {
            border-top: 2px solid #e2e8f0;
            padding-top: 15px;
            margin-top: 15px;
            font-size: 18px;
            font-weight: 700;
            color: #1e293b;
        }

        /* Shipping Styles */
        .shipping-container {
            background: white;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e2e8f0;
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .shipping-container.active {
            display: block;
        }

        .shipping-header {
            text-align: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e2e8f0;
        }

        .shipping-header h3 {
            color: #1e293b;
            margin-bottom: 10px;
        }

        .port-selection {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .port-card {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: center;
        }

        .port-card:hover, .port-card.selected {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .port-card h5 {
            color: #1e293b;
            margin-bottom: 5px;
        }

        .port-card p {
            color: #64748b;
            font-size: 12px;
        }

        .shipping-timeline {
            display: flex;
            justify-content: space-between;
            margin: 30px 0;
            position: relative;
        }

        .shipping-timeline::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: #e2e8f0;
            z-index: 1;
        }

        .timeline-step {
            background: white;
            border: 3px solid #e2e8f0;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            z-index: 2;
            font-size: 12px;
        }

        .timeline-step.completed {
            border-color: #22c55e;
            background: #22c55e;
            color: white;
        }

        .timeline-step.active {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .typing-indicator {
            display: none;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background: #f1f5f9;
            border-radius: 16px;
            width: fit-content;
        }

        .typing-indicator.active {
            display: flex;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: #94a3b8;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }

        @keyframes slideInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .success-animation {
            text-align: center;
            padding: 40px;
        }

        .checkmark {
            font-size: 60px;
            color: #22c55e;
            animation: bounce 1s ease;
        }

        @keyframes bounce {
            0%, 20%, 60%, 100% { transform: translateY(0); }
            40% { transform: translateY(-20px); }
            80% { transform: translateY(-10px); }
        }

        /* Customer Info Popup Styles */
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            animation: fadeIn 0.3s ease;
        }

        .popup-overlay.active {
            display: flex;
        }

        .customer-info-popup {
            background: white;
            border-radius: 20px;
            padding: 30px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 25px 50px rgba(0,0,0,0.25);
            animation: slideInScale 0.4s ease;
        }

        @keyframes slideInScale {
            from { 
                opacity: 0; 
                transform: scale(0.9) translateY(-20px); 
            }
            to { 
                opacity: 1; 
                transform: scale(1) translateY(0); 
            }
        }

        .popup-header {
            text-align: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e2e8f0;
        }

        .popup-header h3 {
            color: #1e293b;
            margin-bottom: 10px;
            font-size: 24px;
        }

        .popup-header p {
            color: #64748b;
            font-size: 14px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 25px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            font-weight: 600;
            color: #334155;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .form-input, .form-select {
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 14px;
            outline: none;
            transition: all 0.2s ease;
            background: white;
            color: #1e293b;
        }

        .form-input:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .shipping-terms-section {
            margin: 25px 0;
            padding: 20px;
            background: #f8fafc;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
        }

        .shipping-terms-title {
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .terms-options {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .term-option {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .term-option:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .term-option.selected {
            border-color: #667eea;
            background: #f0f4ff;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
        }

        .term-option input[type="radio"] {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }

        .term-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .term-name {
            font-weight: 600;
            color: #1e293b;
            font-size: 16px;
        }

        .term-price {
            font-weight: 700;
            color: #667eea;
            font-size: 16px;
        }

        .term-description {
            font-size: 13px;
            color: #64748b;
            line-height: 1.4;
        }

        .term-breakdown {
            margin-top: 8px;
            font-size: 12px;
            color: #64748b;
        }

        .popup-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
        }

        .popup-btn {
            padding: 12px 24px;
            border-radius: 12px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
            min-width: 120px;
        }

        .popup-btn-primary {
            background: #667eea;
            color: white;
        }

        .popup-btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }

        .popup-btn-secondary {
            background: #f1f5f9;
            color: #334155;
            border: 2px solid #e2e8f0;
        }

        .popup-btn-secondary:hover {
            background: #e2e8f0;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .company-logo {
                font-size: 2.5rem;
                flex-direction: column;
                gap: 10px;
            }
            
            .otoz-logo {
                width: 60px;
                height: 60px;
            }
            
            .tagline {
                font-size: 1.2rem;
            }
            
            .hero-description {
                font-size: 1rem;
            }
            
            .stats-container {
                gap: 2rem;
            }
            
            .demo-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: 150px;
                padding: 20px;
            }
            
            .onboarding-container {
                padding: 10px;
                justify-content: flex-start;
            }
            
            .onboarding-content {
                margin: 0;
                padding: 10px 0;
            }
            
            .onboarding-title {
                font-size: 1.5rem;
                margin-bottom: 0.5rem;
            }
            
            .onboarding-subtitle {
                font-size: 0.9rem;
                margin-bottom: 1.5rem;
            }
            
            .preference-cards {
                gap: 1rem;
                margin-bottom: 1.5rem;
            }
            
            .preference-section {
                padding: 15px;
            }
            
            .preference-title {
                font-size: 1.1rem;
                margin-bottom: 10px;
            }
            
            .car-type-grid {
                grid-template-columns: 1fr 1fr;
                gap: 10px;
            }
            
            .car-type-card {
                padding: 15px;
            }
            
            .car-type-icon {
                font-size: 2rem;
            }
            
            .car-type-name {
                font-size: 1rem;
            }
            
            .find-cars-btn {
                padding: 12px 30px;
                font-size: 1rem;
                margin-top: 1rem;
            }
            
            .range-slider-container {
                margin: 15px 0;
            }
            
            .range-value {
                font-size: 1.1rem;
                margin-top: 8px;
            }
            
            .other-input {
                padding: 12px;
                font-size: 0.9rem;
                margin-top: 10px;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }

            .selected-car-display {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .car-cards-container {
                height: auto; /* Adjust for grid layout */
                min-height: auto;
            }

            .car-card-stack { /* This is no longer used for dynamic display, but keeping for reference if needed */
                height: auto;
            }
        }

        /* Notification Styles */
        .notification-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            animation: fadeIn 0.3s ease;
        }

        .notification-overlay.active {
            display: flex;
        }

        .notification-popup {
            background: white;
            border-radius: 20px;
            padding: 30px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.25);
            animation: slideInScale 0.4s ease;
            text-align: center;
        }

        .notification-popup.error {
            border-left: 5px solid #ef4444;
        }

        .notification-popup.info {
            border-left: 5px solid #3b82f6;
        }

        .notification-popup.success {
            border-left: 5px solid #22c55e;
        }

        .notification-header {
            margin-bottom: 20px;
        }

        .notification-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            display: block;
        }

        .notification-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 10px;
        }

        .notification-message {
            color: #64748b;
            line-height: 1.6;
            margin-bottom: 20px;
        }

        .validation-list {
            text-align: left;
            background: #f8fafc;
            border-radius: 12px;
            padding: 15px;
            margin: 20px 0;
        }

        .validation-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            color: #ef4444;
            font-size: 14px;
        }

        .validation-item:last-child {
            margin-bottom: 0;
        }

        .validation-item::before {
            content: "‚ö†Ô∏è";
            margin-right: 10px;
            font-size: 16px;
        }

        .notification-actions {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }

        .notification-btn {
            padding: 12px 24px;
            border-radius: 12px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
            min-width: 120px;
        }

        .notification-btn-primary {
            background: #667eea;
            color: white;
        }

        .notification-btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 3000;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #e2e8f0;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
</head>
<body>
<div class="popup-overlay" id="existing-customer-portal">
    <div class="customer-info-popup" style="max-width: 500px;">
        <div class="popup-header">
            <h3>üéØ Existing Customer Portal</h3>
            <p>Access your AI agents for order updates and support</p>
        </div>

        <div style="margin: 25px 0;">
            <div class="form-group">
                <label class="form-label">Vehicle ID / Order Number</label>
                <input type="text" class="form-input" id="customer-vehicle-id" placeholder="Enter your vehicle ID or order number" style="color: #1e293b;">
            </div>
        </div>

        <div style="margin: 25px 0;">
            <h4 style="color: #1e293b; margin-bottom: 15px;">ü§ñ Select Your AI Agent</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <button onclick="accessAgent('sparky')" style="padding: 15px; background: linear-gradient(135deg, #fbbf24, #f59e0b); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 600;">
                    üë®‚Äçüíº Sparky<br><small>Negotiation Status</small>
                </button>
                <button onclick="accessAgent('inspector')" style="padding: 15px; background: linear-gradient(135deg, #06b6d4, #0891b2); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 600;">
                    üë©‚Äçüî¨ Inspector<br><small>Quality Report</small>
                </button>
                <button onclick="accessAgent('penny')" style="padding: 15px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 600;">
                    üë©‚Äçüíº Penny<br><small>Payment Status</small>
                </button>
                <button onclick="accessAgent('captain')" style="padding: 15px; background: linear-gradient(135deg, #059669, #047857); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 600;">
                    üë®‚Äç‚úàÔ∏è Captain<br><small>Shipping Tracker</small>
                </button>
            </div>
        </div>

        <div class="popup-actions">
            <button type="button" class="popup-btn popup-btn-secondary" onclick="closeExistingCustomerPortal()">Close</button>
        </div>
    </div>
</div>
    <div class="notification-overlay" id="notification-overlay">
        <div class="notification-popup" id="notification-popup">
            <div class="notification-header">
                <span class="notification-icon" id="notification-icon">‚ö†Ô∏è</span>
                <div class="notification-title" id="notification-title">Please Complete Your Preferences</div>
            </div>
            <div class="notification-message" id="notification-message">
                Please make sure to select all your preferences before we can find your perfect cars.
            </div>
            <div class="validation-list" id="validation-list" style="display: none;">
                </div>
            <div class="notification-actions">
                <button class="notification-btn notification-btn-primary" onclick="closeNotification()">Got It!</button>
            </div>
        </div>
    </div>

    <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner"></div>
    </div>

    <div class="welcome-page" id="welcome-page">
        <div class="floating-elements">
            <div class="floating-icon" style="left: 10%; animation-delay: 0s;">üöó</div>
            <div class="floating-icon" style="left: 20%; animation-delay: 2s;">‚ö°</div>
            <div class="floating-icon" style="left: 30%; animation-delay: 4s;">ü§ñ</div>
            <div class="floating-icon" style="left: 40%; animation-delay: 6s;">üåê</div>
            <div class="floating-icon" style="left: 50%; animation-delay: 8s;">üíé</div>
            <div class="floating-icon" style="left: 60%; animation-delay: 10s;">üöÄ</div>
            <div class="floating-icon" style="left: 70%; animation-delay: 12s;">üí≥</div>
            <div class="floating-icon" style="left: 80%; animation-delay: 14s;">üöö</div>
            <div class="floating-icon" style="left: 90%; animation-delay: 16s;">‚ö°</div>
        </div>

        <div class="hero-content">
            <div class="company-logo">
                <svg class="otoz-logo" viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                            <stop offset="50%" style="stop-color:#764ba2;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:#f093fb;stop-opacity:1" />
                        </linearGradient>
                        <filter id="glow">
                            <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                            <feMerge> 
                                <feMergeNode in="coloredBlur"/>
                                <feMergeNode in="SourceGraphic"/>
                            </feMerge>
                        </filter>
                    </defs>
                    
                    <circle cx="60" cy="60" r="55" fill="none" stroke="url(#logoGradient)" stroke-width="3" opacity="0.3"/>
                    
                    <path d="M25 70 L35 55 L45 50 L75 50 L85 55 L95 70 L95 85 L25 85 Z" fill="url(#logoGradient)" filter="url(#glow)"/>
                    
                    <path d="M40 55 L45 50 L75 50 L80 55 Z" fill="rgba(255,255,255,0.4)"/>
                    <circle cx="40" cy="80" r="8" fill="white" stroke="url(#logoGradient)" stroke-width="2"/>
                    <circle cx="80" cy="80" r="8" fill="white" stroke="url(#logoGradient)" stroke-width="2"/>
                    
                    <circle cx="60" cy="62" r="15" fill="rgba(255,255,255,0.95)" stroke="url(#logoGradient)" stroke-width="2"/>
                    
                    <circle cx="55" cy="58" r="2" fill="url(#logoGradient)"/>
                    <circle cx="65" cy="58" r="2" fill="url(#logoGradient)"/>
                    <circle cx="60" cy="66" r="2" fill="url(#logoGradient)"/>
                    <line x1="55" y1="58" x2="60" y2="66" stroke="url(#logoGradient)" stroke-width="1"/>
                    <line x1="65" y1="58" x2="60" y2="66" stroke="url(#logoGradient)" stroke-width="1"/>
                    
                    <path d="M55 45 L60 40 L58 42 L63 37 L58 42 L60 45 Z" fill="#FFD700" filter="url(#glow)"/>
                    
                    <text x="60" y="95" text-anchor="middle" fill="url(#logoGradient)" font-size="12" font-weight="bold">OTOZ</text>
                </svg>
                Otoz.ai
            </div>
            <div class="tagline">First AI-Driven Cross-Border Used Car Marketplace</div>
            <div class="hero-description">
                Buy Used Cars Globally‚ÄîSpeedy Buying, Shipping Right Away! Powered by AI for Smart, Secure, rapid Transactions‚ÄîRevolutionizing Car Trade History with our Multi-Agent AI Concierge System.
            </div>

            <div class="stats-container">
                <div class="stat-item">
                    <span class="stat-number">4</span>
                    <span class="stat-label">AI Agents</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">10%</span>
                    <span class="stat-label">Smart Discounts</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">24/7</span>
                    <span class="stat-label">Autonomous</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">Global</span>
                    <span class="stat-label">Reach</span>
                </div>
            </div>

            <div class="agent-hero-container">
                <div class="agent-carousel">
                    <div class="agent-hero-card" style="--rotation: 0deg;">
                        <div class="agent-big-avatar sparky-avatar"></div>
                        <div class="agent-hero-name">Sparky</div>
                        <div class="agent-hero-role">Discovery & Negotiation Expert</div>
                    </div>
                    
                    <div class="agent-hero-card" style="--rotation: 90deg;">
                        <div class="agent-big-avatar inspector-avatar"></div>
                        <div class="agent-hero-name">Inspector</div>
                        <div class="agent-hero-role">Quality Assurance Specialist</div>
                    </div>
                    
                    <div class="agent-hero-card" style="--rotation: 180deg;">
                        <div class="agent-big-avatar penny-avatar"></div>
                        <div class="agent-hero-name">Penny</div>
                        <div class="agent-hero-role">Payment & Billing Wizard</div>
                    </div>
                    
                    <div class="agent-hero-card" style="--rotation: 270deg;">
                        <div class="agent-big-avatar captain-avatar"></div>
                        <div class="agent-hero-role">Global Shipping Commander</div>
                    </div>
                </div>
            </div>

            <div class="agent-selection-hint">
                üéÆ Watch your AI team revolve ‚Ä¢ Each agent specializes in different aspects of your car buying journey
            </div>

            <div class="game-start-controls">
                <button class="start-game-btn" onclick="startDemo()">
                    üöÄ START YOUR JOURNEY
                </button>
                <button class="existing-customer-btn" onclick="showExistingCustomerPortal()">
                    üë§ EXISTING CUSTOMER
                </button>
            </div>
        </div>
    </div>

    <div class="demo-container" id="demo-container">
        <div class="onboarding-container" id="onboarding-phase">
            <div class="onboarding-content">
                <div class="onboarding-title">ü§ñ Hi! I'm Sparky, Your AI Car Expert</div>
                <div class="onboarding-subtitle">Let me find the perfect car for you! Tell me your preferences...</div>
                
                <div class="preference-cards">
                    <div class="preference-section">
                        <div class="preference-title">üöó Select Your Preferred Vehicle</div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;">
                            <div>
                                <label style="display: block; font-weight: 600; color: white; margin-bottom: 8px; font-size: 14px;">Make</label>
                                <select class="form-select" id="car-make" onchange="updateModelOptions()" style="background: rgba(255,255,255,0.1); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 12px; border-radius: 12px; width: 100%;">
                                    <option value="">Any Make</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; font-weight: 600; color: white; margin-bottom: 8px; font-size: 14px;">Model</label>
                                <select class="form-select" id="car-model" onchange="updateYearOptions()" style="background: rgba(255,255,255,0.1); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 12px; border-radius: 12px; width: 100%;">
                                    <option value="">Any Model</option>
                                </select>
                            </div>
                            <div>
                                <label style="display: block; font-weight: 600; color: white; margin-bottom: 8px; font-size: 14px;">Year</label>
                                <select class="form-select" id="car-year" onchange="updatePreferenceStatus()" style="background: rgba(255,255,255,0.1); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 12px; border-radius: 12px; width: 100%;">
                                    <option value="">Any Year</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="preference-section">
                        <div class="preference-title">üìè Preferred mileage range?</div>
                        <div class="range-slider-container">
                            <div class="range-labels">
                                <span>1,000 km</span>
                                <span>200,000 km</span>
                            </div>
                            <input type="range" class="range-slider" id="mileage-range" min="1000" max="200000" value="50000" step="1000" oninput="updateMileageDisplay(this.value)">
                            <div class="range-value" id="mileage-display">50,000 km</div>
                        </div>
                    </div>

                    <div class="preference-section">
                        <div class="preference-title">üí∞ What's your budget?</div>
                        <div class="range-slider-container">
                            <div class="range-labels">
                                <span>$1,000</span>
                                <span>$1,000,000</span>
                            </div>
                            <input type="range" class="range-slider" id="budget-range" min="1000" max="1000000" value="25000" step="1000" oninput="updateBudgetDisplay(this.value)">
                            <div class="range-value" id="budget-display">$25,000</div>
                        </div>
                    </div>
                </div>

                <button class="find-cars-btn" onclick="findMatchingCars();">
                    ‚ö° Find My Perfect Cars
                </button>
            </div>
        </div>

        <div class="car-discovery-container" id="car-discovery-phase">
            <div class="discovery-header">
                <div class="discovery-title">üéØ Choose Your Perfect Car!</div>
                <div class="discovery-subtitle">Click the car you like to start negotiating with Sparky!</div>
            </div>
            
            <div class="dynamic-car-grid" id="dynamic-car-grid">
                </div>
            
            <div class="back-to-preferences-btn">
                <button class="btn btn-secondary" onclick="goBackToPreferences()">‚Üê Change Preferences</button>
            </div>
        </div>

        <div style="display: none; width: 100%; height: 100%;" id="chat-interface">
            <div class="sidebar">
                <div class="logo">
                    <svg class="sidebar-logo" viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
                        <defs>
                            <linearGradient id="sidebarGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                                <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path d="M25 70 L35 55 L45 50 L75 50 L85 55 L95 70 L95 85 L25 85 Z" fill="url(#sidebarGradient)"/>
                        <circle cx="40" cy="80" r="6" fill="white"/>
                        <circle cx="80" cy="80" r="6" fill="white"/>
                        <circle cx="60" cy="62" r="8" fill="rgba(255,255,255,0.9)"/>
                        <path d="M55 45 L60 40 L58 42 L63 37 L58 42 L60 45 Z" fill="#FFD700"/>
                    </svg>
                    Otoz.ai
                </div>
                
                <div class="agent-status">
                    <h4 style="margin-bottom: 15px; color: #334155;">Your AI Team</h4>
                    
                    <div class="agent-card active" id="agent-sparky">
                        <div class="agent-avatar" style="background: linear-gradient(135deg, #fbbf24, #f59e0b); color: white;">‚ö°</div>
                        <div class="agent-name">Sparky</div>
                        <div class="agent-role">Discovery & Negotiation</div>
                        <div class="agent-tagline">Your energetic car finder!</div>
                    </div>
                    
                    <div class="agent-card" id="agent-penny">
                        <div class="agent-avatar" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white;">üíé</div>
                        <div class="agent-name">Penny</div>
                        <div class="agent-role">Payment & Billing</div>
                        <div class="agent-tagline">Financial wizard</div>
                    </div>
                    
                    <div class="agent-card" id="agent-inspector">
                        <div class="agent-avatar" style="background: linear-gradient(135deg, #06b6d4, #0891b2); color: white;">üîç</div>
                        <div class="agent-name">Inspector</div>
                        <div class="agent-role">Pre-Export Inspection</div>
                        <div class="agent-tagline">Quality guarantee</div>
                    </div>
                    
                    <div class="agent-card" id="agent-captain">
                        <div class="agent-avatar" style="background: linear-gradient(135deg, #059669, #047857); color: white;">üåä</div>
                        <div class="agent-name">Captain</div>
                        <div class="agent-role">Logistics & Delivery</div>
                        <div class="agent-tagline">Global shipping expert</div>
                    </div>
                </div>
                
                <div class="progress-bar">
                    <div class="progress-fill" id="progress" style="width: 25%"></div>
                </div>
                
                <div style="margin-top: auto; font-size: 12px; color: #64748b; text-align: center;">
                    <strong>4-Agent AI System</strong><br>
                    Discovery ‚Üí Inspection ‚Üí Payment ‚Üí Shipping
                </div>
            </div>
            
            <div class="main-content">
                <div class="header">
                    <button class="back-btn" onclick="goBack()">‚Üê Back to Home</button>
                    <h2 id="current-agent-title">Discovery & Negotiation with Sparky</h2>
                    <div class="demo-badge">Live Demo</div>
                </div>
                
                <div class="chat-area">
                    <div class="negotiation-phase" id="negotiation-phase">
                        <div class="selected-car-display" id="selected-car-display">
                            </div>
                        
                        <div class="negotiation-info">
                            <strong>‚ö° Sparky's AI Negotiation Engine:</strong> I can offer intelligent discounts up to 10%
                            <div class="price-range">
                                <span>My best price: <span id="min-price">$16,650</span></span>
                                <span>Listed price: <span id="max-price">$18,500</span></span>
                            </div>
                        </div>
                        
                        <div class="chat-messages" id="negotiation-messages">
                            <div class="message">
                                <div class="message-avatar" style="background: linear-gradient(135deg, #fbbf24, #f59e0b); color: white;">‚ö°</div>
                                <div class="message-content">Hey there! I'm Sparky, your personal car-hunting AI! ‚ö° I'm absolutely THRILLED you picked this amazing ride! This beauty is already at a great price, but here's the exciting part - I've got some AI magic up my sleeve and might be able to work out an even better deal for you! What do you think about the current price? Let's make some sparks fly! üöó‚ú®</div>
                            </div>
                            
                            <div class="typing-indicator" id="typing-negotiation">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                        </div>
                        
                        <div class="chat-input-container">
                            <input type="text" class="chat-input" id="negotiation-input" placeholder="Type your message... Try: 'That's too expensive' or 'What's your best price?'" />
                            <button class="send-btn" onclick="sendNegotiationMessage()">‚û§</button>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="btn btn-secondary" onclick="quickReply('That seems too expensive. Can you do better?')">üí∞ Too Expensive</button>
                            <button class="btn btn-secondary" onclick="quickReply('What is your absolute best price?')">ü§ù Best Price?</button>
                            <button class="btn btn-primary" onclick="acceptCurrentPrice()" id="accept-btn">‚úÖ Accept Deal</button>
                        </div>
                    </div>

                    <div class="inspection-container" id="inspection-phase">
                        <div class="inspection-header">
                            <h3>üîç Pre-Export Car Inspection</h3>
                            <p style="color: #64748b;">Inspector is conducting a thorough quality check</p>
                        </div>
                        
                        <div class="chat-messages" style="max-height: 150px;">
                            <div class="message">
                                <div class="message-avatar" style="background: linear-gradient(135deg, #06b6d4, #0891b2); color: white;">üîç</div>
                                <div class="message-content">Greetings! I'm Inspector, your meticulous quality specialist. üîç I've taken over from Sparky to ensure your vehicle meets our highest standards. I'm conducting a comprehensive 127-point inspection covering engine, transmission, body, interior, electronics, and safety systems. Quality is my obsession!</div>
                            </div>
                        </div>
                        
                        <div class="inspection-checklist">
                            <h4 style="color: #1e293b; margin-bottom: 15px;">üîç Inspection Progress</h4>
                            
                            <div class="inspection-category" data-category="engine">
                                <div class="inspection-category-header">
                                    <span class="inspection-icon">üîß</span>
                                    <span class="inspection-category-name">Engine & Performance</span>
                                    <span class="inspection-status">‚è≥ Checking...</span>
                                </div>
                                <div class="inspection-details">
                                    Oil levels, compression test, belt condition, fluid leaks
                                </div>
                            </div>
                            
                            <div class="inspection-category" data-category="transmission">
                                <div class="inspection-category-header">
                                    <span class="inspection-icon">‚öôÔ∏è</span>
                                    <span class="inspection-category-name">Transmission</span>
                                    <span class="inspection-status">‚è≥ Pending...</span>
                                </div>
                                <div class="inspection-details">
                                    Gear shifting, fluid condition, clutch operation
                                </div>
                            </div>
                            
                            <div class="inspection-category" data-category="body">
                                <div class="inspection-category-header">
                                    <span class="inspection-icon">üöó</span>
                                    <span class="inspection-category-name">Body & Paint</span>
                                    <span class="inspection-status">‚è≥ Pending...</span>
                                </div>
                                <div class="inspection-details">
                                    Paint condition, rust check, panel alignment, damage assessment
                                </div>
                            </div>
                            
                            <div class="inspection-category" data-category="interior">
                                <div class="inspection-category-header">
                                    <span class="inspection-icon">ü™ë</span>
                                    <span class="inspection-category-name">Interior</span>
                                    <span class="inspection-status">‚è≥ Pending...</span>
                                </div>
                                <div class="inspection-details">
                                    Seat condition, electronics, air conditioning, wear assessment
                                </div>
                            </div>
                            
                            <div class="inspection-category" data-category="safety">
                                <div class="inspection-category-header">
                                    <span class="inspection-icon">üõ°Ô∏è</span>
                                    <span class="inspection-category-name">Safety Systems</span>
                                    <span class="inspection-status">‚è≥ Pending...</span>
                                </div>
                                <div class="inspection-details">
                                    Brakes, airbags, lights, tires, steering, seatbelts
                                </div>
                            </div>
                        </div>
                        
                        <div class="inspection-progress">
                            <div class="progress-bar-container">
                                <div class="inspection-progress-bar" id="inspection-progress-bar">
                                    <div class="inspection-progress-fill" id="inspection-progress-fill" style="width: 0%"></div>
                                </div>
                                <div class="inspection-progress-text" id="inspection-progress-text">0% Complete</div>
                            </div>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="btn btn-primary" onclick="startInspection()" id="start-inspection-btn">üîç Start Inspection</button>
                            <button class="btn btn-success" onclick="proceedToPenny()" id="proceed-penny-btn" style="display: none;">‚úÖ Inspection Complete - Proceed to Penny</button>
                            <button class="btn btn-secondary" onclick="goBackToNegotiation()">‚Üê Back to Sparky</button>
                        </div>
                    </div>

                    <div class="invoice-container" id="invoice-phase">
                        <div class="invoice-header">
                            <h3>üíé Professional Invoice Generation</h3>
                            <p style="color: #64748b;">Penny is preparing your detailed purchase documentation</p>
                        </div>
                        
                        <div class="chat-messages" style="max-height: 150px;">
                            <div class="message">
                                <div class="message-avatar" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white;">üíé</div>
                                <div class="message-content">Hello! I'm Penny, your financial wizard! üíé Inspector has completed the quality check with flying colors - your vehicle passed with excellence! Now I'll handle all the financial details with precision. I need your shipping information and preferred terms to generate a professional invoice. Every detail matters to me!</div>
                            </div>
                        </div>
                        
                        <div class="invoice-details" id="invoice-details" style="display: none;">
                            <div class="detail-section">
                                <h4>üöó Vehicle Details</h4>
                                <div class="detail-item"><span>Vehicle:</span> <strong id="invoice-vehicle-name">-</strong></div>
                                <div class="detail-item"><span>VIN:</span> <strong id="invoice-vin">-</strong></div>
                                <div class="detail-item"><span>Mileage:</span> <strong id="invoice-mileage">-</strong></div>
                                <div class="detail-item"><span>Condition:</span> <strong>Excellent</strong></div>
                                <div class="detail-item"><span>Location:</span> <strong>Tokyo, Japan</strong></div>
                            </div>
                            
                            <div class="detail-section">
                                <h4>üë§ Customer Information</h4>
                                <div class="detail-item"><span>Name:</span> <strong id="customer-name-display">-</strong></div>
                                <div class="detail-item"><span>Email:</span> <strong id="customer-email-display">-</strong></div>
                                <div class="detail-item"><span>Phone:</span> <strong id="customer-phone-display">-</strong></div>
                                <div class="detail-item"><span>Address:</span> <strong id="customer-address-display">-</strong></div>
                                <div class="detail-item"><span>Country:</span> <strong id="customer-country-display">-</strong></div>
                                <div class="detail-item"><span>Destination Port:</span> <strong id="customer-port-display">-</strong></div>
                                <div class="detail-item"><span>Invoice #:</span> <strong>INV-2025-001234</strong></div>
                            </div>
                        </div>
                        
                        <div class="total-section" id="invoice-totals" style="display: none;">
                            <div class="total-item">
                                <span>Vehicle Price:</span>
                                <span id="vehicle-price">$18,500</span>
                            </div>
                            <div class="total-item">
                                <span>AI Negotiation Discount:</span>
                                <span id="discount-amount" style="color: #22c55e;">-$0</span>
                            </div>
                            <div class="total-item" id="inland-transport-item">
                                <span>Inland Transportation:</span>
                                <span id="inland-transport-cost">$200</span>
                            </div>
                            <div class="total-item" id="freight-item" style="display: none;">
                                <span>Ocean Freight:</span>
                                <span id="freight-cost">$0</span>
                            </div>
                            <div class="total-item" id="insurance-item" style="display: none;">
                                <span>Marine Insurance (2%):</span>
                                <span id="insurance-cost">$0</span>
                            </div>
                            <div class="total-item">
                                <span>Export Documentation:</span>
                                <span>$350</span>
                            </div>
                            <div class="total-item final">
                                <span>Total Amount (<span id="selected-terms">FOB</span>):</span>
                                <span id="final-total">$18,975</span>
                            </div>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="btn btn-primary" onclick="showCustomerInfoForm()" id="collect-info-btn">üìã Collect Customer Info</button>
                            <button class="btn btn-primary" onclick="proceedToShipping()" id="confirm-payment-btn" style="display: none;">üí≥ Confirm Payment</button>
                            <button class="btn btn-secondary" onclick="goBackToInspection()">‚Üê Back to Inspector</button>
                        </div>
                    </div>

                    <div class="shipping-container" id="shipping-phase">
                        <div class="shipping-header">
                            <h3>üåä Global Logistics Coordination</h3>
                            <p style="color: #64748b;">Captain is organizing your worldwide delivery</p>
                        </div>
                        
                        <div class="chat-messages" style="max-height: 150px;">
                            <div class="message">
                                <div class="message-avatar" style="background: linear-gradient(135deg, #059669, #047857); color: white;">üåä</div>
                                <div class="message-content">Ahoy! I'm Captain, your global shipping expert! üåä Penny has processed your payment beautifully - everything is financially secured! Now I'm taking command of the logistics. I've sailed these trade routes for years and I'll ensure your vehicle reaches you safely across the oceans. Let me chart the best course for your delivery!</div>
                            </div>
                        </div>
                        
                        <div style="margin: 20px 0;">
                            <h4 style="color: #1e293b; margin-bottom: 15px;">üåä Select Shipping Port</h4>
                            <div class="port-selection">
                                <div class="port-card" onclick="selectPort(this, 'Tokyo Port', 1850, '25 days')">
                                    <h5>üáØüáµ Tokyo Port</h5>
                                    <p><strong>$1,850</strong> ‚Ä¢ 25 days</p>
                                    <p>Most economical option</p>
                                </div>
                                <div class="port-card selected" onclick="selectPort(this, 'Yokohama Port', 2150, '20 days')">
                                    <h5>üáØüáµ Yokohama Port</h5>
                                    <p><strong>$2,150</strong> ‚Ä¢ 20 days</p>
                                    <p>Recommended ‚≠ê</p>
                                </div>
                                <div class="port-card" onclick="selectPort(this, 'Osaka Port', 2350, '18 days')">
                                    <h5>üáØüáµ Osaka Port</h5>
                                    <p><strong>$2,350</strong> ‚Ä¢ 18 days</p>
                                    <p>Express shipping</p>
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin: 20px 0;">
                            <h4 style="color: #1e293b; margin-bottom: 15px;">üìÖ Shipping Timeline</h4>
                            <div class="shipping-timeline">
                                <div class="timeline-step completed">‚úì</div>
                                <div class="timeline-step active">üìã</div>
                                <div class="timeline-step">üöö</div>
                                <div class="timeline-step">üö¢</div>
                                <div class="timeline-step">üè†</div>
                            </div>
                            <div style="display: flex; justify-content: space-between; font-size: 12px; color: #64748b; margin-top: 10px;">
                                <span>Payment</span>
                                <span>Documentation</span>
                                <span>Pickup</span>
                                <span>Transit</span>
                                <span>Delivery</span>
                            </div>
                        </div>
                        
                        <div class="total-section">
                            <div class="total-item">
                                <span>Vehicle + Fees:</span>
                                <span id="shipping-vehicle-total">$18,975</span>
                            </div>
                            <div class="total-item">
                                <span>Additional Shipping:</span>
                                <span id="shipping-cost">$0</span>
                            </div>
                            <div class="total-item">
                                <span>Handling Fee:</span>
                                <span>$275</span>
                            </div>
                            <div class="total-item final">
                                <span>Grand Total:</span>
                                <span id="grand-total">$19,250</span>
                            </div>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="btn btn-success" onclick="completeOrder()">üéâ Complete Order</button>
                            <button class="btn btn-secondary" onclick="goBackToInvoice()">‚Üê Back to Penny</button>
                        </div>
                    </div>

                    <div class="shipping-container" id="success-phase">
                        <div class="success-animation">
                            <div class="checkmark">‚úÖ</div>
                            <h2 style="color: #22c55e; margin: 20px 0;">Mission Complete! üéâ</h2>
                            <p style="color: #64748b; margin-bottom: 30px;">
                                Congratulations! Your 4-agent AI team has successfully coordinated your vehicle purchase, inspection, payment, and shipping.
                            </p>
                            
                            <div style="background: #f0f4ff; border: 1px solid #c7d2fe; border-radius: 15px; padding: 20px; margin: 20px 0; text-align: left;">
                                <h4 style="color: #4338ca; margin-bottom: 15px;">ü§ñ Your AI Team Journey:</h4>
                                <div style="color: #4338ca; font-size: 14px; line-height: 1.6;">
                                    <div style="margin-bottom: 8px;"><strong>‚ö° Sparky:</strong> Found and negotiated your perfect car</div>
                                    <div style="margin-bottom: 8px;"><strong>üîç Inspector:</strong> Verified quality with 127-point inspection</div>
                                    <div style="margin-bottom: 8px;"><strong>üíé Penny:</strong> Processed payment and documentation</div>
                                    <div><strong>üåä Captain:</strong> Coordinated global shipping logistics</div>
                                </div>
                            </div>
                        </div>
                        
                        <div style="background: #f0fdf4; border: 1px solid #bbf7d0; border-radius: 12px; padding: 20px; margin: 20px 0;">
                            <h4 style="color: #166534; margin-bottom: 15px;">üì¶ Order Summary</h4>
                            <div style="color: #166534;">
                                <div class="detail-item"><span>Vehicle:</span> <strong id="summary-vehicle">-</strong></div>
                                <div class="detail-item"><span>Total Paid:</span> <strong id="summary-total">$19,250</strong></div>
                                <div class="detail-item"><span>Shipping Terms:</span> <strong id="summary-terms">FOB</strong></div>
                                <div class="detail-item"><span>Destination:</span> <strong id="summary-destination">Customer Port</strong></div>
                                <div class="detail-item"><span>ETA:</span> <strong>20 business days</strong></div>
                                <div class="detail-item"><span>Tracking ID:</span> <strong>OTOZ-TRK-789456</strong></div>
                            </div>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="btn btn-primary" onclick="restartDemo()">üîÑ Try Another Demo</button>
                            <button class="btn btn-secondary" onclick="goBack()">üè† Back to Home</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="popup-overlay" id="customer-info-popup">
        <div class="customer-info-popup">
            <div class="popup-header">
                <h3>üìã Customer Information & Shipping Terms</h3>
                <p>Please provide your details for the Bill of Lading and select your preferred shipping terms</p>
            </div>
            
            <form id="customer-info-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Full Name *</label>
                        <input type="text" class="form-input" id="customer-name" placeholder="Enter your full name" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Email Address *</label>
                        <input type="email" class="form-input" id="customer-email" placeholder="your@email.com" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Phone Number *</label>
                        <input type="tel" class="form-input" id="customer-phone" placeholder="+1-XXX-XXX-XXXX" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Country *</label>
                        <select class="form-select" id="customer-country" required>
                            <option value="">Select your country</option>
                            <option value="United States">United States</option>
                            <option value="Canada">Canada</option>
                            <option value="United Kingdom">United Kingdom</option>
                            <option value="Germany">Germany</option>
                            <option value="France">France</option>
                            <option value="Australia">Australia</option>
                            <option value="Brazil">Brazil</option>
                            <option value="South Africa">South Africa</option>
                            <option value="UAE">United Arab Emirates</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    
                    <div class="form-group full-width">
                        <label class="form-label">Full Address *</label>
                        <input type="text" class="form-input" id="customer-address" placeholder="Street address, City, State/Province, Postal Code" required>
                    </div>
                    
                    <div class="form-group full-width">
                        <label class="form-label">Destination Port *</label>
                        <select class="form-select" id="destination-port" required>
                            <option value="">Select destination port</option>
                            <option value="Los Angeles, CA">Los Angeles, CA</option>
                            <option value="Long Beach, CA">Long Beach, CA</option>
                            <option value="New York, NY">New York, NY</option>
                            <option value="Newark, NJ">Newark, NJ</option>
                            <option value="Savannah, GA">Savannah, GA</option>
                            <option value="Charleston, SC">Charleston, SC</option>
                            <option value="Houston, TX">Houston, TX</option>
                            <option value="Seattle, WA">Seattle, WA</option>
                            <option value="Vancouver, BC">Vancouver, BC</option>
                            <option value="Montreal, QC">Montreal, QC</option>
                            <option value="Felixstowe, UK">Felixstowe, UK</option>
                            <option value="Hamburg, Germany">Hamburg, Germany</option>
                            <option value="Le Havre, France">Le Havre, France</option>
                            <option value="Sydney, Australia">Sydney, Australia</option>
                            <option value="Melbourne, Australia">Melbourne, Australia</option>
                            <option value="Santos, Brazil">Santos, Brazil</option>
                            <option value="Durban, South Africa">Durban, South Africa</option>
                            <option value="Jebel Ali, UAE">Jebel Ali, UAE</option>
                        </select>
                    </div>
                </div>
                
                <div class="shipping-terms-section">
                    <div class="shipping-terms-title">üö¢ Select Shipping Terms (Incoterms)</div>
                    
                    <div class="terms-options">
                        <div class="term-option selected" onclick="selectShippingTerm(this, 'FOB')">
                            <input type="radio" name="shipping-terms" value="FOB" checked>
                            <div class="term-header">
                                <span class="term-name">FOB (Free On Board)</span>
                                <span class="term-price" id="fob-price">+$200</span>
                            </div>
                            <div class="term-description">
                                You pay for the vehicle and inland transportation to the port. Ocean freight and insurance are your responsibility.
                            </div>
                            <div class="term-breakdown">
                                Includes: Vehicle price + Inland transport ($200) + Export docs ($350)
                            </div>
                        </div>
                        
                        <div class="term-option" onclick="selectShippingTerm(this, 'CFR')">
                            <input type="radio" name="shipping-terms" value="CFR">
                            <div class="term-header">
                                <span class="term-name">C&F (Cost & Freight)</span>
                                <span class="term-price" id="cfr-price">+$2,350</span>
                            </div>
                            <div class="term-description">
                                We handle ocean freight to your port. You arrange insurance and are responsible for import duties.
                            </div>
                            <div class="term-breakdown">
                                Includes: FOB + Ocean freight ($2,150)
                            </div>
                        </div>
                        
                        <div class="term-option" onclick="selectShippingTerm(this, 'CIF')">
                            <input type="radio" name="shipping-terms" value="CIF">
                            <div class="term-header">
                                <span class="term-name">CIF (Cost, Insurance & Freight)</span>
                                <span class="term-price" id="cif-price">+$2,720</span>
                            </div>
                            <div class="term-description">
                                Complete package - we handle everything to your port including marine insurance coverage.
                            </div>
                            <div class="term-breakdown" id="cif-breakdown">
                                Includes: C&F + Marine insurance (2% of vehicle value)
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="popup-actions">
                    <button type="button" class="popup-btn popup-btn-secondary" onclick="closeCustomerInfoForm()">Cancel</button>
                    <button type="submit" class="popup-btn popup-btn-primary">Generate Invoice</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global state management
        let currentPhase = 'onboarding';
        let selectedMake = '';
        let selectedModel = '';
        let selectedYear = '';
        let selectedMileage = 50000;
        let selectedBudget = 25000;
        let availableCars = [];
        let selectedCar = null;
        let currentPrice = 0;
        let originalPrice = 0;
        let discountApplied = 0;
        let negotiationCount = 0;
        let selectedShippingTerms = 'FOB';
        let customerInfo = {};
        let isExistingCustomer = false;

        // Initialize car database
        const carDatabase = [];

        // Top 50 Car Manufacturers and their models
        const carMakers = {
            'Toyota': ['Camry', 'Corolla', 'Prius', 'RAV4', 'Highlander', 'Sienna', 'Tacoma', 'Tundra', 'Land Cruiser', 'Avalon'],
            'Honda': ['Accord', 'Civic', 'CR-V', 'Pilot', 'Odyssey', 'Ridgeline', 'HR-V', 'Passport', 'Fit', 'Insight'],
            'Ford': ['F-150', 'Mustang', 'Explorer', 'Escape', 'Edge', 'Expedition', 'Ranger', 'Bronco', 'Focus', 'Fusion'],
            'Chevrolet': ['Silverado', 'Camaro', 'Corvette', 'Equinox', 'Traverse', 'Tahoe', 'Suburban', 'Malibu', 'Cruze', 'Impala'],
            'BMW': ['3 Series', '5 Series', '7 Series', 'X3', 'X5', 'X7', 'Z4', 'i3', 'i8', 'M3'],
            'Mercedes-Benz': ['C-Class', 'E-Class', 'S-Class', 'GLA', 'GLC', 'GLE', 'GLS', 'A-Class', 'CLA', 'AMG GT'],
            'Audi': ['A3', 'A4', 'A6', 'A8', 'Q3', 'Q5', 'Q7', 'Q8', 'TT', 'R8'],
            'Nissan': ['Altima', 'Sentra', 'Maxima', 'Rogue', 'Murano', 'Pathfinder', 'Armada', 'Frontier', 'Titan', '370Z'],
            'Hyundai': ['Elantra', 'Sonata', 'Tucson', 'Santa Fe', 'Palisade', 'Kona', 'Venue', 'Accent', 'Veloster', 'Genesis'],
            'Kia': ['Forte', 'Optima', 'Sportage', 'Sorento', 'Telluride', 'Soul', 'Rio', 'Stinger', 'Niro', 'Cadenza'],
            'Volkswagen': ['Jetta', 'Passat', 'Golf', 'Tiguan', 'Atlas', 'Arteon', 'Beetle', 'Touareg', 'ID.4', 'GTI'],
            'Subaru': ['Outback', 'Forester', 'Impreza', 'Legacy', 'Ascent', 'Crosstrek', 'WRX', 'BRZ', 'Tribeca', 'Baja'],
            'Mazda': ['Mazda3', 'Mazda6', 'CX-3', 'CX-5', 'CX-9', 'CX-30', 'MX-5 Miata', 'RX-8', 'CX-7', 'Tribute'],
            'Lexus': ['ES', 'IS', 'GS', 'LS', 'NX', 'RX', 'GX', 'LX', 'RC', 'LC'],
            'Acura': ['ILX', 'TLX', 'RLX', 'RDX', 'MDX', 'NSX', 'TSX', 'TL', 'RL', 'ZDX'],
            'Infiniti': ['Q50', 'Q60', 'Q70', 'QX50', 'QX60', 'QX80', 'G35', 'G37', 'FX35', 'M35'],
            'Cadillac': ['ATS', 'CTS', 'XTS', 'XT4', 'XT5', 'XT6', 'Escalade', 'SRX', 'DeVille', 'Eldorado'],
            'Lincoln': ['MKZ', 'Continental', 'Corsair', 'Nautilus', 'Aviator', 'Navigator', 'MKX', 'MKS', 'Town Car', 'LS'],
            'Buick': ['Regal', 'LaCrosse', 'Encore', 'Enclave', 'Envision', 'Verano', 'Century', 'LeSabre', 'Park Avenue', 'Riviera'],
            'GMC': ['Sierra', 'Canyon', 'Acadia', 'Terrain', 'Yukon', 'Savana', 'Envoy', 'Jimmy', 'Safari', 'Sonoma'],
            'Dodge': ['Charger', 'Challenger', 'Durango', 'Journey', 'Grand Caravan', 'Ram', 'Viper', 'Avenger', 'Caliber', 'Magnum'],
            'Jeep': ['Wrangler', 'Grand Cherokee', 'Cherokee', 'Compass', 'Renegade', 'Gladiator', 'Commander', 'Liberty', 'Patriot', 'Wagoneer'],
            'Chrysler': ['300', 'Pacifica', 'Voyager', 'Town & Country', 'Sebring', 'Concorde', 'LeBaron', 'New Yorker', 'Fifth Avenue', 'Imperial'],
            'Tesla': ['Model S', 'Model 3', 'Model X', 'Model Y', 'Cybertruck', 'Roadster', 'Semi', 'Model 2', 'Model C', 'Model P'],
            'Porsche': ['911', 'Cayenne', 'Macan', 'Panamera', 'Taycan', 'Boxster', 'Cayman', '918 Spyder', 'Carrera GT', '959'],
            'Jaguar': ['XE', 'XF', 'XJ', 'F-PACE', 'E-PACE', 'I-PACE', 'F-TYPE', 'XK', 'S-Type', 'X-Type'],
            'Land Rover': ['Range Rover', 'Discovery', 'Defender', 'Evoque', 'Velar', 'Sport', 'LR2', 'LR3', 'LR4', 'Freelander'],
            'Volvo': ['S60', 'S90', 'XC40', 'XC60', 'XC90', 'V60', 'V90', 'C30', 'C70', 'S40'],
            'Saab': ['9-3', '9-5', '9-7X', '900', '9000', '99', '96', '95', '93', '92'],
            'Alfa Romeo': ['Giulia', 'Stelvio', '4C', 'Giulietta', 'MiTo', '159', '156', '147', 'GTV', 'Spider'],
            'Ferrari': ['488', 'F8', 'Portofino', 'Roma', 'SF90', '812', 'LaFerrari', 'California', '458', '599'],
            'Lamborghini': ['Hurac√°n', 'Aventador', 'Urus', 'Gallardo', 'Murci√©lago', 'Countach', 'Diablo', 'Jalpa', 'Silhouette', 'Espada'],
            'Maserati': ['Ghibli', 'Quattroporte', 'Levante', 'GranTurismo', 'GranCabrio', '3200 GT', 'Coupe', 'Spyder', 'Shamal', 'Biturbo'],
            'Bentley': ['Continental', 'Flying Spur', 'Bentayga', 'Mulsanne', 'Azure', 'Arnage', 'Brooklands', 'Turbo R', 'Eight', 'Brooklands'],
            'Rolls-Royce': ['Phantom', 'Ghost', 'Wraith', 'Dawn', 'Cullinan', 'Silver Spur', 'Silver Shadow', 'Corniche', 'Park Ward', 'Camargue'],
            'Aston Martin': ['DB11', 'Vantage', 'DBS', 'Rapide', 'DBX', 'DB9', 'V8 Vantage', 'DB7', 'Vanquish', 'One-77'],
            'McLaren': ['720S', '570S', '650S', 'P1', 'Senna', 'GT', '12C', 'MP4', '675LT', 'Artura'],
            'Lotus': ['Evora', 'Exige', 'Elise', 'Esprit', 'Elan', 'Europa', 'Elite', 'Eclat', 'Excel', 'Carlton'],
            'Mini': ['Cooper', 'Countryman', 'Clubman', 'Convertible', 'Hardtop', 'Paceman', 'Roadster', 'Coupe', 'One', 'Works'],
            'Smart': ['Fortwo', 'Forfour', 'Roadster', 'Crossblade', 'Forspeed', 'Forvision', 'For-us', 'Forjeremy', 'Formore', 'Forstars'],
            'Scion': ['tC', 'xB', 'xD', 'FR-S', 'iQ', 'xA', 'iA', 'iM', 'tC2', 'xB2'],
            'Genesis': ['G70', 'G80', 'G90', 'GV70', 'GV80', 'Coupe', 'Sedan', 'Essentia', 'Mint', 'Neolun'],
            'Ram': ['1500', '2500', '3500', 'ProMaster', 'ProMaster City', 'C/V', 'Dakota', 'Van', 'Pickup', 'Chassis Cab'],
            'Mitsubishi': ['Outlander', 'Eclipse Cross', 'Mirage', 'Lancer', 'Galant', 'Montero', 'Diamante', '3000GT', 'Starion', 'Cordia'],
            'Suzuki': ['Swift', 'Vitara', 'Jimny', 'Baleno', 'Ciaz', 'Ertiga', 'S-Cross', 'Kizashi', 'SX4', 'Grand Vitara'],
            'Isuzu': ['D-Max', 'MU-X', 'Trooper', 'Rodeo', 'Amigo', 'VehiCROSS', 'Ascender', 'Axiom', 'Hombre', 'Impulse'],
            'Fiat': ['500', 'Panda', 'Tipo', 'Punto', 'Bravo', 'Stilo', 'Marea', 'Brava', 'Tempra', 'Regata'],
            'Lancia': ['Ypsilon', 'Delta', 'Musa', 'Phedra', 'Thesis', 'Lybra', 'Kappa', 'Dedra', 'Thema', 'Prisma'],
            'Peugeot': ['208', '308', '508', '2008', '3008', '5008', '207', '307', '407', '607'],
            'Citro√´n': ['C1', 'C3', 'C4', 'C5', 'C6', 'Berlingo', 'Picasso', 'Xsara', 'Saxo', 'ZX'],
            'Renault': ['Clio', 'Megane', 'Scenic', 'Laguna', 'Espace', 'Twingo', 'Kangoo', 'Captur', 'Kadjar', 'Koleos']
        };

        // Generate comprehensive car database - FIXED VERSION with Images
        function initializeCarDatabase() {
            carDatabase.length = 0; // Clear existing
            let carIdCounter = 1;

            // Image URLs for cars - using Unsplash for placeholders
            const carImages = [
                'https://images.unsplash.com/photo-1605559424843-9e4c228bf1c2?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Sedan/General car
                'https://images.unsplash.com/photo-1582234032731-97d81a95a8f5?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // SUV
                'https://images.unsplash.com/photo-1542362543-b71576495d43?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Sports car
                'https://images.unsplash.com/photo-1549888980-fe06a394b98f?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Another sedan
                'https://images.unsplash.com/photo-1594953335534-803a55ed51d0?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Crossover
                'https://images.unsplash.com/photo-1532581699940-0259b359f518?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Pickup truck
                'https://images.unsplash.com/photo-1517454153075-84725065a297?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', // Luxury car
                'https://images.unsplash.com/photo-1546700732-c6d9a9f2425f?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D' // Compact car
            ];

            // Function to get a random image URL
            const getRandomImage = () => carImages[Math.floor(Math.random() * carImages.length)];

            // Core cars that will always be available with specific images
            const guaranteedCars = [
                {
                    id: carIdCounter++, make: 'Toyota', model: 'Camry', year: '2020', name: '2020 Toyota Camry',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1594953335534-803a55ed51d0?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 35000, price: 22000, vin: 'TC2020001',
                    engine: '2.5L I4', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'up', trendPercent: '+3.2%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Honda', model: 'Accord', year: '2019', name: '2019 Honda Accord',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1618843479313-40f8afb4b4d8?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 42000, price: 20500, vin: 'HA2019002',
                    engine: '1.5L Turbo', transmission: 'CVT', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'up', trendPercent: '+2.8%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'BMW', model: '3 Series', year: '2020', name: '2020 BMW 3 Series',
                    icon: 'üèéÔ∏è', image: 'https://images.unsplash.com/photo-1542362543-b71576495d43?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 28000, price: 32000, vin: 'BMW2020003',
                    engine: '2.0L Turbo', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'up', trendPercent: '+4.1%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Ford', model: 'Explorer', year: '2021', name: '2021 Ford Explorer',
                    icon: 'üöô', image: 'https://images.unsplash.com/photo-1610842261763-71822c9a1746?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 15000, price: 38000, vin: 'FE2021004',
                    engine: '2.3L Turbo', transmission: 'Automatic', fuelType: 'Gasoline', seats: '7 Seats',
                    trend: 'up', trendPercent: '+3.7%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Mercedes-Benz', model: 'C-Class', year: '2020', name: '2020 Mercedes-Benz C-Class',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1549888980-fe06a394b98f?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 32000, price: 35000, vin: 'MBC2020005',
                    engine: '2.0L Turbo', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'down', trendPercent: '-1.2%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Audi', model: 'A4', year: '2019', name: '2019 Audi A4',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1558981403-c5e317127a6c?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 38000, price: 29000, vin: 'AA42019006',
                    engine: '2.0L Turbo', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'up', trendPercent: '+2.1%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Lexus', model: 'ES', year: '2020', name: '2020 Lexus ES',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1532581699940-0259b359f518?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 25000, price: 33000, vin: 'LES2020007',
                    engine: '2.5L I4', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'up', trendPercent: '+3.5%', location: 'Tokyo, Japan', condition: 'Excellent'
                },
                {
                    id: carIdCounter++, make: 'Volkswagen', model: 'Passat', year: '2019', name: '2019 Volkswagen Passat',
                    icon: 'üöó', image: 'https://images.unsplash.com/photo-1546700732-c6d9a9f2425f?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D', mileage: 45000, price: 18000, vin: 'VP2019008',
                    engine: '2.0L Turbo', transmission: 'Automatic', fuelType: 'Gasoline', seats: '5 Seats',
                    trend: 'down', trendPercent: '-2.3%', location: 'Tokyo, Japan', condition: 'Good'
                }
            ];

            // Add guaranteed cars to database
            carDatabase.push(...guaranteedCars);

            // Generate additional cars programmatically
            const additionalMakes = ['Nissan', 'Hyundai', 'Kia', 'Mazda', 'Subaru'];
            const models = ['Sedan', 'SUV', 'Hatchback', 'Coupe'];
            const years = ['2018', '2019', '2020', '2021', '2022'];

            additionalMakes.forEach(make => {
                models.forEach(model => {
                    years.forEach(year => {
                        if (carIdCounter <= 50) { // Limit total cars for performance
                            carDatabase.push({
                                id: carIdCounter++,
                                make: make,
                                model: model,
                                year: year,
                                name: `${year} ${make} ${model}`,
                                icon: model === 'SUV' ? 'üöô' : 'üöó',
                                image: getRandomImage(), // Assign random image
                                mileage: Math.floor(Math.random() * 80000) + 10000,
                                price: Math.floor(Math.random() * 40000) + 15000,
                                vin: `${make.substring(0,2).toUpperCase()}${year}${String(carIdCounter).padStart(4, '0')}`,
                                engine: ['1.6L I4', '2.0L I4', '2.4L I4', '3.0L V6'][Math.floor(Math.random() * 4)],
                                transmission: ['Manual', 'Automatic', 'CVT'][Math.floor(Math.random() * 3)],
                                fuelType: 'Gasoline',
                                seats: model === 'SUV' ? '7 Seats' : '5 Seats',
                                trend: Math.random() > 0.5 ? 'up' : 'down',
                                trendPercent: Math.random() > 0.5 ? `+${(Math.random() * 5).toFixed(1)}%` : `-${(Math.random() * 3).toFixed(1)}%`,
                                location: 'Tokyo, Japan',
                                condition: 'Good'
                            });
                        }
                    });
                });
            });

            console.log(`‚úÖ Car database initialized with ${carDatabase.length} vehicles`);
        }

        // Shipping cost calculations
        const shippingCosts = {
            inlandTransport: 200,
            exportDocs: 350,
            oceanFreight: 2150,
            getInsurance: (vehiclePrice) => Math.round(vehiclePrice * 0.02)
        };

        // Start demo function
        function startDemo() {
            document.getElementById('welcome-page').style.display = 'none';
            document.getElementById('demo-container').classList.add('active');
            showOnboarding();
        }

        // Show onboarding phase
        function showOnboarding() {
            currentPhase = 'onboarding';
            document.getElementById('onboarding-phase').style.display = 'flex';
            document.getElementById('car-discovery-phase').style.display = 'none';
            document.getElementById('chat-interface').style.display = 'none';
            
            setTimeout(() => {
                updatePreferenceStatus();
            }, 100);
        }

        // Vehicle selection functions
        function populateCarMakes() {
            const makeSelect = document.getElementById('car-make');
            if (!makeSelect) return;
            
            // Clear existing options except "Any Make"
            makeSelect.innerHTML = '<option value="">Any Make</option>';
            
            // Add all car makes from our database
            Object.keys(carMakers).forEach(make => {
                const option = document.createElement('option');
                option.value = make;
                option.textContent = make;
                makeSelect.appendChild(option);
            });
        }

        function updateModelOptions() {
            selectedMake = document.getElementById('car-make').value;
            const modelSelect = document.getElementById('car-model');
            const yearSelect = document.getElementById('car-year');
            
            // Clear model and year options
            modelSelect.innerHTML = '<option value="">Any Model</option>';
            yearSelect.innerHTML = '<option value="">Any Year</option>';
            selectedModel = '';
            selectedYear = '';
            
            if (selectedMake && carMakers[selectedMake]) {
                carMakers[selectedMake].forEach(model => {
                    const option = document.createElement('option');
                    option.value = model;
                    option.textContent = model;
                    modelSelect.appendChild(option);
                });
            }
            
            updatePreferenceStatus();
        }

        function updateYearOptions() {
            selectedModel = document.getElementById('car-model').value;
            const yearSelect = document.getElementById('car-year');
            
            // Clear year options
            yearSelect.innerHTML = '<option value="">Any Year</option>';
            selectedYear = '';
            
            if (selectedMake && selectedModel) {
                // Get available years from database for this make/model combo
                const years = [...new Set(carDatabase.filter(car => 
                    car.make === selectedMake && car.model === selectedModel
                ).map(car => car.year))].sort((a, b) => b - a);
                
                years.forEach(year => {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    yearSelect.appendChild(option);
                });
            }
            
            updatePreferenceStatus();
        }

        // Existing Customer Portal Functions
        function showExistingCustomerPortal() {
            document.getElementById('existing-customer-portal').classList.add('active');
        }

        function closeExistingCustomerPortal() {
            document.getElementById('existing-customer-portal').classList.remove('active');
            document.getElementById('customer-vehicle-id').value = '';
        }

        function accessAgent(agentType) {
            const vehicleId = document.getElementById('customer-vehicle-id').value.trim();
            
            if (!vehicleId) {
                showValidationMessage(['Please enter your Vehicle ID or Order Number first.']);
                return;
            }
            
            // Close portal
            closeExistingCustomerPortal();
            
            // Set existing customer mode
            isExistingCustomer = true;
            
            // Show demo container
            document.getElementById('welcome-page').style.display = 'none';
            document.getElementById('demo-container').classList.add('active');
            document.getElementById('onboarding-phase').style.display = 'none';
            document.getElementById('car-discovery-phase').style.display = 'none';
            document.getElementById('chat-interface').style.display = 'flex';
            
            // Set up mock vehicle data for existing customer
            selectedCar = {
                id: vehicleId,
                name: '2020 Toyota Camry',
                icon: 'üöó',
                image: 'https://images.unsplash.com/photo-1594953335534-803a55ed51d0?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
                mileage: 45000,
                price: 18500,
                vin: vehicleId,
                engine: '2.5L I4',
                transmission: 'Automatic',
                fuelType: 'Gasoline',
                seats: '5 Seats',
                trend: 'up',
                trendPercent: '+3.2%'
            };
            
            // Navigate to specific agent based on selection
            switch(agentType) {
                case 'sparky':
                    showSparkyStatus(vehicleId);
                    break;
                case 'inspector':
                    showInspectorStatus(vehicleId);
                    break;
                case 'penny':
                    showPennyStatus(vehicleId);
                    break;
                case 'captain':
                    showCaptainStatus(vehicleId);
                    break;
            }
        }

        function showSparkyStatus(vehicleId) {
            updateAgentStatus('sparky', true);
            updateProgress(25);
            document.getElementById('current-agent-title').textContent = '‚ö° Negotiation Status with Sparky';
            
            // Show negotiation phase with status info
            document.getElementById('negotiation-phase').style.display = 'block';
            populateSelectedCarDisplay();
            
            // Add status message
            const messagesContainer = document.getElementById('negotiation-messages');
            messagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #fbbf24, #f59e0b); color: white;">üë®‚Äçüíº</div>
                    <div class="message-content">Hey there! üëã I found your order for Vehicle ID: ${vehicleId}. Great news - your negotiation was successful! I secured you a fantastic deal with a $1,850 discount. Your vehicle is currently with Inspector for quality checks. Everything is proceeding smoothly! ‚ö°</div>
                </div>
            `;
        }

        function showInspectorStatus(vehicleId) {
            updateAgentStatus('inspector', true);
            updateProgress(50);
            document.getElementById('current-agent-title').textContent = 'üîç Inspection Status with Inspector';
            
            document.getElementById('inspection-phase').classList.add('active');
            
            // Show completed inspection
            const categories = ['engine', 'transmission', 'body', 'interior', 'safety'];
            categories.forEach(category => {
                const categoryElement = document.querySelector(`[data-category="${category}"]`);
                if (categoryElement) {
                    categoryElement.classList.add('completed');
                    const statusElement = categoryElement.querySelector('.inspection-status');
                    statusElement.textContent = '‚úÖ Excellent';
                    statusElement.classList.add('completed');
                }
            });
            
            updateInspectionProgress(100);
            
            const messagesContainer = document.querySelector('#inspection-phase .chat-messages');
            messagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #06b6d4, #0891b2); color: white;">üë©‚Äçüî¨</div>
                    <div class="message-content">Hello! Inspector here. üîç I've completed the comprehensive inspection for Vehicle ID: ${vehicleId}. Excellent news - your vehicle passed all 127 quality checkpoints with flying colors! Engine performance: Outstanding. Safety systems: Perfect. Body condition: Pristine. Your vehicle is now with Penny for payment processing.</div>
                </div>
            `;
        }

        function showPennyStatus(vehicleId) {
            updateAgentStatus('penny', true);
            updateProgress(75);
            document.getElementById('current-agent-title').textContent = 'üíé Payment Status with Penny';
            
            document.getElementById('invoice-phase').classList.add('active');
            
            const messagesContainer = document.querySelector('#invoice-phase .chat-messages');
            messagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white;">üë©‚Äçüíº</div>
                    <div class="message-content">Greetings! Penny here, your payment specialist. üíé For Vehicle ID: ${vehicleId}, I have great news! Your payment of $18,975 has been successfully processed. Invoice #INV-2025-001234 has been generated and sent to your email. All financial documentation is complete and your vehicle is now with Captain for shipping arrangements!</div>
                </div>
            `;
        }

        function showCaptainStatus(vehicleId) {
            updateAgentStatus('captain', true);
            updateProgress(100);
            document.getElementById('current-agent-title').textContent = 'üåä Shipping Status with Captain';
            
            document.getElementById('shipping-phase').classList.add('active');
            
            const messagesContainer = document.querySelector('#shipping-phase .chat-messages');
            messagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #059669, #047857); color: white;">üë®‚Äç‚úàÔ∏è</div>
                    <div class="message-content">Ahoy! Captain here. üåä Your vehicle (ID: ${vehicleId}) is currently in transit! Departed from Yokohama Port on June 15th. Current location: Pacific Ocean, 850 nautical miles from Los Angeles. Estimated arrival: June 28th. Tracking ID: OTOZ-TRK-${vehicleId}. Your vehicle is sailing smoothly across the Pacific! üö¢</div>
                </div>
            `;
        }

        // Update range displays
        function updateMileageDisplay(value) {
            selectedMileage = parseInt(value);
            document.getElementById('mileage-display').textContent = `${selectedMileage.toLocaleString()} km`;
            updatePreferenceStatus();
        }

        function updateBudgetDisplay(value) {
            selectedBudget = parseInt(value);
            document.getElementById('budget-display').textContent = `$${selectedBudget.toLocaleString()}`;
            updatePreferenceStatus();
        }

        // Update preference section visual indicators
        function updatePreferenceStatus() {
            const sections = document.querySelectorAll('.preference-section');
            const findButton = document.querySelector('.find-cars-btn');
            let allComplete = true;
            
            // Vehicle selection section
            const vehicleSection = sections[0];
            selectedMake = document.getElementById('car-make')?.value || '';
            selectedModel = document.getElementById('car-model')?.value || '';
            selectedYear = document.getElementById('car-year')?.value || '';

            if (selectedMake || selectedModel || selectedYear) {
                vehicleSection.classList.remove('incomplete');
                vehicleSection.classList.add('complete');
            } else {
                vehicleSection.classList.remove('complete');
                vehicleSection.classList.add('incomplete');
                allComplete = false;
            }
            
            // Mileage section
            const mileageSection = sections[1];
            if (selectedMileage > 0) { // Assuming 0 is initial default, any move indicates selection
                mileageSection.classList.remove('incomplete');
                mileageSection.classList.add('complete');
            } else {
                mileageSection.classList.remove('complete');
                mileageSection.classList.add('incomplete');
                allComplete = false;
            }
            
            // Budget section
            const budgetSection = sections[2];
            if (selectedBudget > 1000) { // Assuming 1000 is min default, any move indicates selection
                budgetSection.classList.remove('incomplete');
                budgetSection.classList.add('complete');
            } else {
                budgetSection.classList.remove('complete');
                budgetSection.classList.add('incomplete');
                allComplete = false;
            }
            
            // Update button state
            if (findButton) {
                if (allComplete) {
                    findButton.classList.remove('incomplete');
                    findButton.textContent = '‚ö° Find My Perfect Cars';
                    findButton.disabled = false;
                } else {
                    findButton.classList.add('incomplete');
                    findButton.textContent = '‚ö†Ô∏è Complete Preferences First';
                    findButton.disabled = true;
                }
            }
        }

        // Find matching cars - ALWAYS RETURNS CARS
        function findMatchingCars() {
            // Get current selections
            selectedMake = document.getElementById('car-make').value;
            selectedModel = document.getElementById('car-model').value;
            selectedYear = document.getElementById('car-year').value;
            
            // Show loading
            const loadingOverlay = document.getElementById('loading-overlay');
            if (loadingOverlay) {
                loadingOverlay.style.display = 'flex';
            }

            setTimeout(() => {
                console.log('üîç Searching cars with filters:', { selectedMake, selectedModel, selectedYear, selectedMileage, selectedBudget });
                
                // Start with all cars
                let filteredCars = [...carDatabase];
                console.log('üìä Total cars in database:', filteredCars.length);
                
                // Apply filters progressively
                if (selectedMake) {
                    filteredCars = filteredCars.filter(car => car.make === selectedMake);
                    console.log(`üè≠ After make filter (${selectedMake}):`, filteredCars.length);
                }
                
                if (selectedModel) {
                    filteredCars = filteredCars.filter(car => car.model === selectedModel);
                    console.log(`üöó After model filter (${selectedModel}):`, filteredCars.length);
                }
                
                if (selectedYear) {
                    filteredCars = filteredCars.filter(car => car.year === selectedYear);
                    console.log(`üìÖ After year filter (${selectedYear}):`, filteredCars.length);
                }
                
                // Apply budget filter (more lenient)
                filteredCars = filteredCars.filter(car => car.price <= selectedBudget * 1.5 && car.price >= selectedBudget * 0.5);
                console.log(`üí∞ After budget filter (${selectedBudget}):`, filteredCars.length);
                
                // Apply mileage filter (more lenient)
                filteredCars = filteredCars.filter(car => car.mileage <= selectedMileage * 1.5 && car.mileage >= selectedMileage * 0.5);
                console.log(`üìè After mileage filter (${selectedMileage}):`, filteredCars.length);

                // If still no cars, get a diverse set of the first few cars from database
                if (filteredCars.length === 0) {
                    console.log('‚ö†Ô∏è No exact matches found for strict filters, showing popular cars instead.');
                    filteredCars = carDatabase.slice(0, 8); // Show a good variety
                }
                
                // Limit to a reasonable number and randomize
                availableCars = shuffleArray(filteredCars).slice(0, 6); // Display up to 6 cars
                
                console.log('‚úÖ Final cars for display:', availableCars.length, availableCars);

                if (loadingOverlay) {
                    loadingOverlay.style.display = 'none';
                }
                
                showCarDiscovery();
            }, 800);
        }

        // Notification functions
        function showValidationMessage(errors) {
            const overlay = document.getElementById('notification-overlay');
            const popup = document.getElementById('notification-popup');
            const icon = document.getElementById('notification-icon');
            const title = document.getElementById('notification-title');
            const message = document.getElementById('notification-message');
            const validationList = document.getElementById('validation-list');
            
            // Set error styling
            popup.className = 'notification-popup error';
            icon.textContent = '‚ö†Ô∏è';
            title.textContent = 'Please Complete Your Preferences';
            message.textContent = 'We need a few more details to find your perfect cars:';
            
            // Show validation list
            validationList.style.display = 'block';
            validationList.innerHTML = errors.map(error => 
                `<div class="validation-item">${error}</div>`
            ).join('');
            
            overlay.classList.add('active');
        }

        function showInfoMessage(text, type = 'info') {
            const overlay = document.getElementById('notification-overlay');
            const popup = document.getElementById('notification-popup');
            const icon = document.getElementById('notification-icon');
            const title = document.getElementById('notification-title');
            const message = document.getElementById('notification-message');
            const validationList = document.getElementById('validation-list');
            
            // Set styling based on type
            popup.className = `notification-popup ${type}`;
            
            if (type === 'info') {
                icon.textContent = '‚ÑπÔ∏è';
                title.textContent = 'Search Results';
            } else if (type === 'success') {
                icon.textContent = '‚úÖ';
                title.textContent = 'Success!';
            }
            
            message.textContent = text;
            validationList.style.display = 'none';
            
            overlay.classList.add('active');
            
            // Auto-close info messages after 3 seconds
            if (type === 'info') {
                setTimeout(() => {
                    closeNotification();
                }, 3000);
            }
        }

        function closeNotification() {
            document.getElementById('notification-overlay').classList.remove('active');
        }

        // Shuffle array utility
        function shuffleArray(array) {
            const shuffled = [...array];
            for (let i = shuffled.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
            }
            return shuffled;
        }

        // Show car discovery phase
        function showCarDiscovery() {
            currentPhase = 'discovery';
            document.getElementById('onboarding-phase').style.display = 'none';
            document.getElementById('car-discovery-phase').style.display = 'flex';
            document.getElementById('car-discovery-phase').classList.add('active');
            document.getElementById('chat-interface').style.display = 'none';
            
            // Update the title with actual number of cars found
            const titleElement = document.querySelector('.discovery-title');
            if (titleElement) {
                titleElement.textContent = `üéØ We Found ${availableCars.length} Perfect Match${availableCars.length !== 1 ? 'es' : ''}!`;
            }
            
            console.log('Showing car discovery phase...'); // Debug
            console.log('Available cars for display:', availableCars); // Debug
            
            // Generate car cards dynamically in the grid
            displayMatchingCarsInGrid();
        }

        // Display matching cars in a grid
        function displayMatchingCarsInGrid() {
            const gridContainer = document.getElementById('dynamic-car-grid');
            gridContainer.innerHTML = ''; // Clear previous cars

            if (availableCars.length === 0) {
                gridContainer.innerHTML = '<p style="text-align: center; color: white; font-size: 1.2rem;">No cars found matching your criteria. Please try adjusting your preferences.</p>';
                return;
            }
            
            availableCars.forEach((car, index) => {
                const cardElement = document.createElement('div');
                cardElement.className = 'simple-car-card';
                cardElement.onclick = () => selectCarFromGrid(index);

                // Determine price color based on make for a subtle effect
                let priceColorClass = '';
                if (car.make === 'Toyota') priceColorClass = 'toyota';
                else if (car.make === 'Honda') priceColorClass = 'honda';
                else if (car.make === 'BMW') priceColorClass = 'bmw';
                else if (car.make === 'Ford') priceColorClass = 'ford';
                else if (car.make === 'Mercedes-Benz') priceColorClass = 'mercedes';
                else if (car.make === 'Audi') priceColorClass = 'audi';
                else if (car.make === 'Lexus') priceColorClass = 'lexus';
                else if (car.make === 'Volkswagen') priceColorClass = 'volkswagen';

                cardElement.innerHTML = `
                    <div class="car-header">
                        <img src="${car.image}" alt="${car.name}" onerror="this.onerror=null;this.src='';" style="display: block;">
                        <span style="${car.image ? 'display: none;' : 'display: block;'}">${car.icon}</span> <div class="price-trend-badge ${car.trend}">
                            ${car.trend === 'up' ? 'üìà' : 'üìâ'} ${car.trendPercent}
                        </div>
                    </div>
                    <div class="car-info">
                        <h3>${car.name}</h3>
                        <div class="specs">
                            ${car.mileage.toLocaleString()} km ‚Ä¢ ${car.engine} ‚Ä¢ ${car.transmission}
                        </div>
                        <div class="price ${priceColorClass}">
                            $${car.price.toLocaleString()}
                        </div>
                        <div class="negotiate-badge">
                            ‚ö° Click to negotiate with Sparky!
                        </div>
                    </div>
                `;
                gridContainer.appendChild(cardElement);
            });
            console.log(`Generated ${availableCars.length} dynamic car cards.`);
        }

        // Select a car from the grid and proceed to negotiation
        function selectCarFromGrid(index) {
            selectedCar = availableCars[index];
            originalPrice = selectedCar.price;
            currentPrice = selectedCar.price; // Start negotiation at original price
            
            console.log('Selected car:', selectedCar);
            startNegotiation();
        }

        // Start negotiation phase
        function startNegotiation() {
            currentPhase = 'negotiation';
            document.getElementById('car-discovery-phase').style.display = 'none';
            document.getElementById('chat-interface').style.display = 'flex';
            
            // Update agent status
            updateAgentStatus('sparky', true);
            updateProgress(25);
            document.getElementById('current-agent-title').textContent = 'üöÄ Discovering with Sparky';
            
            // Show negotiation phase
            document.getElementById('negotiation-phase').style.display = 'block';
            document.getElementById('inspection-phase').classList.remove('active');
            document.getElementById('invoice-phase').classList.remove('active');
            document.getElementById('shipping-phase').classList.remove('active');
            document.getElementById('success-phase').classList.remove('active');
            
            // Populate selected car display
            populateSelectedCarDisplay();
            
            // Reset negotiation state
            negotiationCount = 0;
            discountApplied = 0;
            updatePriceDisplay();
            updateNegotiationInfo();
            
            // Clear previous messages except initial
            clearNegotiationMessages();
        }

        // Populate selected car display
        function populateSelectedCarDisplay() {
            const container = document.getElementById('selected-car-display');
            container.innerHTML = `
                <div class="selected-car-image">
                    <img src="${selectedCar.image}" alt="${selectedCar.name}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px;" 
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                    <div style="width: 100%; height: 100%; display: none; align-items: center; justify-content: center; font-size: 3rem; background: linear-gradient(45deg, #f3f4f6, #e5e7eb); border-radius: 12px;">
                        ${selectedCar.icon}
                    </div>
                </div>
                <div class="selected-car-info">
                    <h3>${selectedCar.name}</h3>
                    <div class="quick-specs">
                        <div><strong>Mileage:</strong> ${selectedCar.mileage.toLocaleString()} km</div>
                        <div><strong>Engine:</strong> ${selectedCar.engine}</div>
                        <div><strong>Transmission:</strong> ${selectedCar.transmission}</div>
                        <div><strong>Condition:</strong> Excellent</div>
                    </div>
                </div>
                <div class="price-display">
                    <div class="current-price" id="current-price-display">$${currentPrice.toLocaleString()}</div>
                    <div class="original-price" id="original-price-display" style="display: ${discountApplied > 0 ? 'block' : 'none'};">$${originalPrice.toLocaleString()}</div>
                    <div class="discount-badge" id="discount-badge-display" style="display: ${discountApplied > 0 ? 'inline-block' : 'none'};">${discountApplied.toLocaleString()} OFF</div>
                </div>
            `;
        }

        // Negotiation functions
        function sendNegotiationMessage() {
            const input = document.getElementById('negotiation-input');
            const message = input.value.trim();
            if (message) {
                addUserMessage(message, 'negotiation-messages');
                input.value = '';
                handleUserMessage(message);
            }
        }

        function quickReply(message) {
            addUserMessage(message, 'negotiation-messages');
            handleUserMessage(message);
        }

        function addUserMessage(message, containerId) {
            const messagesContainer = document.getElementById(containerId);
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message user';
            messageDiv.innerHTML = `
                <div class="message-avatar" style="background: #667eea; color: white;">üë§</div>
                <div class="message-content">${message}</div>
            `;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function addAIResponse(message, containerId = 'negotiation-messages', delay = 1000) {
            const typingIndicator = document.getElementById('typing-negotiation');
            if (typingIndicator) {
                typingIndicator.classList.add('active');
            }
            
            setTimeout(() => {
                if (typingIndicator) {
                    typingIndicator.classList.remove('active');
                }
                
                const messagesContainer = document.getElementById(containerId);
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.innerHTML = `
                    <div class="message-avatar" style="background: #fef3c7; color: #f59e0b;">‚ö°</div>
                    <div class="message-content">${message}</div>
                `;
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, delay);
        }

        function handleUserMessage(message) {
            const lowerMessage = message.toLowerCase();
            
            if (lowerMessage.includes('expensive') || lowerMessage.includes('too much') || lowerMessage.includes('cheaper') || lowerMessage.includes('lower')) {
                handleNegotiation('expensive');
            } else if (lowerMessage.includes('best price') || lowerMessage.includes('lowest') || lowerMessage.includes('final')) {
                handleNegotiation('best');
            } else if (lowerMessage.includes('accept') || lowerMessage.includes('deal') || lowerMessage.includes('buy')) {
                acceptCurrentPrice();
            } else {
                // Generic response
                const responses = [
                    "I understand! Let me see what I can do to make this work for you. üí™",
                    "Great question! This " + selectedCar.name + " is really worth every penny, but I'm here to negotiate! ‚ö°",
                    "I appreciate your interest! Let me check my pricing algorithms... ü§ñ"
                ];
                addAIResponse(responses[Math.floor(Math.random() * responses.length)]);
            }
        }

        function handleNegotiation(type) {
            negotiationCount++;
            let newDiscount = 0;
            let response = '';
            const maxDiscount = Math.floor(originalPrice * 0.1); // 10% max discount

            if (type === 'expensive' && negotiationCount === 1) {
                newDiscount = Math.floor(maxDiscount * 0.3); // 3% discount
                response = `I hear you! Let me apply my AI magic... ‚ú® I can offer you a $${newDiscount.toLocaleString()} discount! That brings it down to $${(originalPrice - newDiscount).toLocaleString()}. This is a really good deal!`;
            } else if (type === 'expensive' && negotiationCount === 2) {
                newDiscount = Math.floor(maxDiscount * 0.6); // 6% discount
                response = `Wow, you're a tough negotiator! üí™ My AI algorithms are working overtime... I can go as low as $${(originalPrice - newDiscount).toLocaleString()}. That's $${newDiscount.toLocaleString()} off!`;
            } else if (type === 'best' || negotiationCount >= 3) {
                newDiscount = maxDiscount; // Full 10% discount
                response = `Alright, you've convinced me! ü§ù Here's my ABSOLUTE best price - $${(originalPrice - newDiscount).toLocaleString()}! That's 10% off the original price. This is as low as I can go!`;
            }

            if (newDiscount > discountApplied) {
                discountApplied = newDiscount;
                currentPrice = originalPrice - discountApplied;
                updatePriceDisplay();
                updateNegotiationInfo();
            }

            addAIResponse(response);
        }

        function updatePriceDisplay() {
            const currentPriceEl = document.getElementById('current-price-display');
            const originalPriceEl = document.getElementById('original-price-display');
            const discountBadgeEl = document.getElementById('discount-badge-display');
            
            if (currentPriceEl) {
                currentPriceEl.textContent = `$${currentPrice.toLocaleString()}`;
            }
            
            if (discountApplied > 0) {
                if (originalPriceEl) {
                    originalPriceEl.style.display = 'block';
                    originalPriceEl.textContent = `$${originalPrice.toLocaleString()}`;
                }
                if (discountBadgeEl) {
                    discountBadgeEl.style.display = 'inline-block';
                    discountBadgeEl.textContent = `$${discountApplied.toLocaleString()} OFF`;
                }
            } else {
                 if (originalPriceEl) {
                    originalPriceEl.style.display = 'none';
                }
                if (discountBadgeEl) {
                    discountBadgeEl.style.display = 'none';
                }
            }
        }

        function updateNegotiationInfo() {
            const minPrice = originalPrice - Math.floor(originalPrice * 0.1);
            document.getElementById('min-price').textContent = `$${minPrice.toLocaleString()}`;
            document.getElementById('max-price').textContent = `$${originalPrice.toLocaleString()}`;
        }

        function acceptCurrentPrice() {
            addUserMessage("Perfect! I'll take it at this price.", 'negotiation-messages');
            addAIResponse("Fantastic! üéâ Let me hand you over to Inspector for a quality check before we finalize everything. Sparky out! ‚ö°", 'negotiation-messages', 1000);
            
            setTimeout(() => {
                proceedToInspection();
            }, 2500);
        }

        function clearNegotiationMessages() {
            const messagesContainer = document.getElementById('negotiation-messages');
            // Keep only the initial Sparky message
            const initialMessage = messagesContainer.querySelector('.message:first-child');
            messagesContainer.innerHTML = '';
            if (initialMessage) {
                messagesContainer.appendChild(initialMessage);
            }
            
            // Re-add typing indicator
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.id = 'typing-negotiation';
            typingIndicator.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            messagesContainer.appendChild(typingIndicator);
        }

        // Inspection functions
        function proceedToInspection() {
            currentPhase = 'inspection';
            document.getElementById('negotiation-phase').style.display = 'none';
            document.getElementById('inspection-phase').classList.add('active');
            
            updateAgentStatus('inspector', true);
            updateProgress(50);
            document.getElementById('current-agent-title').textContent = 'üîç Quality Check with Inspector';

            // Reset inspection status for new inspection
            document.getElementById('start-inspection-btn').style.display = 'inline-block';
            document.getElementById('proceed-penny-btn').style.display = 'none';
            updateInspectionProgress(0);

            document.querySelectorAll('.inspection-category').forEach(category => {
                category.classList.remove('checking', 'completed');
                category.querySelector('.inspection-status').textContent = '‚è≥ Pending...';
                category.querySelector('.inspection-status').classList.remove('checking', 'completed');
            });
            
            // Reset chat messages for Inspector
            const inspectorMessagesContainer = document.querySelector('#inspection-phase .chat-messages');
            inspectorMessagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #06b6d4, #0891b2); color: white;">üîç</div>
                    <div class="message-content">Greetings! I'm Inspector, your meticulous quality specialist. üîç I've taken over from Sparky to ensure your vehicle meets our highest standards. I'm conducting a comprehensive 127-point inspection covering engine, transmission, body, interior, electronics, and safety systems. Quality is my obsession!</div>
                </div>
            `;
        }

        function startInspection() {
            document.getElementById('start-inspection-btn').style.display = 'none';
            
            const categories = ['engine', 'transmission', 'body', 'interior', 'safety'];
            let currentCategory = 0;
            let progress = 0;
            
            function inspectCategory() {
                if (currentCategory < categories.length) {
                    const categoryElement = document.querySelector(`[data-category="${categories[currentCategory]}"]`);
                    const statusElement = categoryElement.querySelector('.inspection-status');
                    
                    // Mark as checking
                    categoryElement.classList.add('checking');
                    statusElement.textContent = 'üîç Checking...';
                    statusElement.classList.add('checking');
                    
                    setTimeout(() => {
                        // Mark as completed
                        categoryElement.classList.remove('checking');
                        categoryElement.classList.add('completed');
                        statusElement.textContent = '‚úÖ Excellent';
                        statusElement.classList.remove('checking');
                        statusElement.classList.add('completed');
                        
                        progress += 20; // 5 categories * 20% = 100%
                        updateInspectionProgress(progress);
                        
                        currentCategory++;
                        
                        if (currentCategory < categories.length) {
                            setTimeout(inspectCategory, 500);
                        } else {
                            // Inspection complete
                            setTimeout(() => {
                                document.getElementById('proceed-penny-btn').style.display = 'inline-block';
                                
                                // Add completion message
                                const messagesContainer = document.querySelector('#inspection-phase .chat-messages');
                                const messageDiv = document.createElement('div');
                                messageDiv.className = 'message';
                                messageDiv.innerHTML = `
                                    <div class="message-avatar" style="background: linear-gradient(135deg, #06b6d4, #0891b2); color: white;">üîç</div>
                                    <div class="message-content">Outstanding! Your ${selectedCar.name} has passed all quality checks with flying colors! üèÜ Every system is in excellent condition. I'm now handing you over to Penny for the financial arrangements. You've chosen a fantastic vehicle!</div>
                                `;
                                messagesContainer.appendChild(messageDiv);
                                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            }, 1000);
                        }
                    }, 2000 + Math.random() * 1000); // Variable timing for realism
                } 
            }
            
            inspectCategory();
        }

        function updateInspectionProgress(percentage) {
            document.getElementById('inspection-progress-fill').style.width = percentage + '%';
            document.getElementById('inspection-progress-text').textContent = percentage + '% Complete';
        }

        function proceedToPenny() {
            currentPhase = 'invoice';
            document.getElementById('inspection-phase').classList.remove('active');
            document.getElementById('invoice-phase').classList.add('active');
            
            updateAgentStatus('penny', true);
            updateProgress(75);
            document.getElementById('current-agent-title').textContent = 'üíé Payment Processing with Penny';
            
            // Reset invoice display
            document.getElementById('invoice-details').style.display = 'none';
            document.getElementById('invoice-totals').style.display = 'none';
            document.getElementById('collect-info-btn').style.display = 'inline-block';
            document.getElementById('confirm-payment-btn').style.display = 'none';

             // Reset chat messages for Penny
            const pennyMessagesContainer = document.querySelector('#invoice-phase .chat-messages');
            pennyMessagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white;">üíé</div>
                    <div class="message-content">Hello! I'm Penny, your financial wizard! üíé Inspector has completed the quality check with flying colors - your vehicle passed with excellence! Now I'll handle all the financial details with precision. I need your shipping information and preferred terms to generate a professional invoice. Every detail matters to me!</div>
                </div>
            `;
        }

        // Invoice functions
        function showCustomerInfoForm() {
            console.log('=== SHOWING CUSTOMER INFO FORM ===');
            console.log('Current price for shipping calculation:', currentPrice);
            updateShippingPrices();
            document.getElementById('customer-info-popup').classList.add('active');
            console.log('Customer info popup should now be visible');
        }

        function closeCustomerInfoForm() {
            console.log('=== CLOSING CUSTOMER INFO FORM ===');
            document.getElementById('customer-info-popup').classList.remove('active');
            console.log('Customer info popup closed');
        }

        function updateShippingPrices() {
            const vehiclePrice = currentPrice;
            const insurance = shippingCosts.getInsurance(vehiclePrice);
            
            const fobTotal = shippingCosts.inlandTransport;
            const cfrTotal = fobTotal + shippingCosts.oceanFreight;
            const cifTotal = cfrTotal + insurance;
            
            document.getElementById('fob-price').textContent = `+$${fobTotal.toLocaleString()}`;
            document.getElementById('cfr-price').textContent = `+$${cfrTotal.toLocaleString()}`;
            document.getElementById('cif-price').textContent = `+$${cifTotal.toLocaleString()}`;
            document.getElementById('cif-breakdown').innerHTML = `Includes: C&F + Marine insurance (2% of $${vehiclePrice.toLocaleString()} = $${insurance.toLocaleString()})`;
        }

        function selectShippingTerm(element, term) {
            document.querySelectorAll('.term-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            element.classList.add('selected');
            
            const radioInput = document.querySelector(`input[value="${term}"]`);
            if (radioInput) {
                radioInput.checked = true;
            }
            
            selectedShippingTerms = term;
            // Update prices when a term is selected, as they depend on the original price
            updateShippingPrices();
        }

        function generateInvoiceWithCustomerInfo() {
            // Update customer information display
            document.getElementById('customer-name-display').textContent = customerInfo.name;
            document.getElementById('customer-email-display').textContent = customerInfo.email;
            document.getElementById('customer-phone-display').textContent = customerInfo.phone;
            document.getElementById('customer-address-display').textContent = customerInfo.address;
            document.getElementById('customer-country-display').textContent = customerInfo.country;
            document.getElementById('customer-port-display').textContent = customerInfo.port;
            
            // Update vehicle info in invoice
            document.getElementById('invoice-vehicle-name').textContent = selectedCar.name;
            document.getElementById('invoice-vin').textContent = selectedCar.vin;
            document.getElementById('invoice-mileage').textContent = `${selectedCar.mileage.toLocaleString()} km`;
            
            // Calculate totals based on shipping terms
            calculateInvoiceTotals();
            
            // Show invoice details and totals
            document.getElementById('invoice-details').style.display = 'grid';
            document.getElementById('invoice-totals').style.display = 'block';
            
            // Hide collect info button and show confirm payment button
            document.getElementById('collect-info-btn').style.display = 'none';
            document.getElementById('confirm-payment-btn').style.display = 'inline-block';
            
            // Add AI message about invoice generation
            setTimeout(() => {
                const messagesContainer = document.querySelector('#invoice-phase .chat-messages');
                if (messagesContainer) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message';
                    messageDiv.innerHTML = `
                        <div class="message-avatar" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white;">üíé</div>
                        <div class="message-content">Perfect! I've generated your ${customerInfo.shippingTerms} invoice for ${customerInfo.name}. The vehicle will be shipped to ${customerInfo.port}. Your total is $${calculateFinalTotal().toLocaleString()}. Ready to proceed with payment? üí≥‚ú®</div>
                    `;
                    messagesContainer.appendChild(messageDiv);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }
            }, 500);
        }

        function calculateInvoiceTotals() {
            const vehiclePrice = currentPrice;
            const insurance = shippingCosts.getInsurance(vehiclePrice);
            
            // Update vehicle price and discount
            document.getElementById('vehicle-price').textContent = `$${vehiclePrice.toLocaleString()}`;
            document.getElementById('discount-amount').textContent = discountApplied > 0 ? `-$${discountApplied.toLocaleString()}` : '$0';
            
            // Show/hide line items based on shipping terms
            const inlandItem = document.getElementById('inland-transport-item');
            const freightItem = document.getElementById('freight-item');
            const insuranceItem = document.getElementById('insurance-item');
            
            if (inlandItem) {
                inlandItem.style.display = 'flex';
                document.getElementById('inland-transport-cost').textContent = `$${shippingCosts.inlandTransport.toLocaleString()}`;
            }
            
            if (selectedShippingTerms === 'FOB') {
                if (freightItem) freightItem.style.display = 'none';
                if (insuranceItem) insuranceItem.style.display = 'none';
            } else if (selectedShippingTerms === 'CFR') {
                if (freightItem) {
                    freightItem.style.display = 'flex';
                    document.getElementById('freight-cost').textContent = `$${shippingCosts.oceanFreight.toLocaleString()}`;
                }
                if (insuranceItem) insuranceItem.style.display = 'none';
            } else if (selectedShippingTerms === 'CIF') {
                if (freightItem) {
                    freightItem.style.display = 'flex';
                    document.getElementById('freight-cost').textContent = `$${shippingCosts.oceanFreight.toLocaleString()}`;
                }
                if (insuranceItem) {
                    insuranceItem.style.display = 'flex';
                    document.getElementById('insurance-cost').textContent = `$${insurance.toLocaleString()}`;
                }
            }
            
            // Update selected terms display and final total
            const selectedTermsEl = document.getElementById('selected-terms');
            const finalTotalEl = document.getElementById('final-total');
            if (selectedTermsEl) selectedTermsEl.textContent = selectedShippingTerms;
            if (finalTotalEl) finalTotalEl.textContent = `$${calculateFinalTotal().toLocaleString()}`;
        }

        function calculateFinalTotal() {
            const vehiclePrice = currentPrice;
            const insurance = shippingCosts.getInsurance(vehiclePrice);
            
            let total = vehiclePrice + shippingCosts.exportDocs + shippingCosts.inlandTransport;
            
            if (selectedShippingTerms === 'CFR' || selectedShippingTerms === 'CIF') {
                total += shippingCosts.oceanFreight;
            }
            
            if (selectedShippingTerms === 'CIF') {
                total += insurance;
            }
            
            return total;
        }

        // Shipping functions
        function proceedToShipping() {
            currentPhase = 'shipping';
            document.getElementById('invoice-phase').classList.remove('active');
            document.getElementById('shipping-phase').classList.add('active');
            
            updateAgentStatus('captain', true); // Fixed agent name to 'captain'
            updateProgress(100);
            document.getElementById('current-agent-title').textContent = 'üåä Logistics & Delivery with Captain'; // Fixed agent name

            // Reset shipping phase UI
            document.querySelectorAll('.port-card').forEach(card => {
                card.classList.remove('selected');
            });
            // Select Yokohama Port by default for demo consistency
            document.querySelector('.port-card:nth-child(2)').classList.add('selected'); 
            selectPort(document.querySelector('.port-card:nth-child(2)'), 'Yokohama Port', 2150, '20 days'); // Set default values

            // Update shipping totals based on selected terms
            const invoiceTotal = calculateFinalTotal();
            document.getElementById('shipping-vehicle-total').textContent = `$${invoiceTotal.toLocaleString()}`;
            
            // The "Additional Shipping" cost will dynamically update via selectPort, 
            // reflecting the cost IF the customer was arranging it (FOB).
            // For CFR/CIF, this is already included in the 'vehicle+fees' total, so it should be $0.
            if (selectedShippingTerms === 'FOB') {
                 // The selectPort function handles this correctly for FOB.
                 // The default port is Yokohama with $2,150, but since selectPort is called with 2150,
                 // the additional shipping cost will be that.
            } else {
                document.getElementById('shipping-cost').textContent = '$0'; // Already covered by CFR/CIF
            }

            const handlingFee = 275;
            const grandTotal = invoiceTotal + parseInt(document.getElementById('shipping-cost').textContent.replace(/[$,]/g, '')) + handlingFee;
            document.getElementById('grand-total').textContent = `$${grandTotal.toLocaleString()}`;


             // Reset chat messages for Captain
            const captainMessagesContainer = document.querySelector('#shipping-phase .chat-messages');
            captainMessagesContainer.innerHTML = `
                <div class="message">
                    <div class="message-avatar" style="background: linear-gradient(135deg, #059669, #047857); color: white;">üåä</div>
                    <div class="message-content">Ahoy! I'm Captain, your global shipping expert! üåä Penny has processed your payment beautifully - everything is financially secured! Now I'm taking command of the logistics. I've sailed these trade routes for years and I'll ensure your vehicle reaches you safely across the oceans. Let me chart the best course for your delivery!</div>
                </div>
            `;
        }

        function selectPort(element, portName, cost, time) {
            document.querySelectorAll('.port-card').forEach(card => {
                card.classList.remove('selected');
            });
            element.classList.add('selected');
            
            // Only update "Additional Shipping" if FOB (customer arranges their own shipping)
            // If CFR/CIF, shipping is already included in the main total.
            let currentAdditionalShippingCost = 0;
            if (selectedShippingTerms === 'FOB') {
                currentAdditionalShippingCost = cost;
                document.getElementById('shipping-cost').textContent = `$${cost.toLocaleString()}`;
            } else {
                document.getElementById('shipping-cost').textContent = '$0'; // Already covered by CFR/CIF
            }

            const vehicleTotal = parseInt(document.getElementById('shipping-vehicle-total').textContent.replace(/[$,]/g, ''));
            const handlingFee = 275;
            const grandTotal = vehicleTotal + currentAdditionalShippingCost + handlingFee;
            document.getElementById('grand-total').textContent = `$${grandTotal.toLocaleString()}`;
        }

        function completeOrder() {
            console.log('=== COMPLETING ORDER ===');
            document.getElementById('shipping-phase').classList.remove('active');
            document.getElementById('success-phase').classList.add('active');
            
            // Update summary details
            const grandTotal = document.getElementById('grand-total').textContent;
            console.log('Final order details:', {
                vehicle: selectedCar.name,
                total: grandTotal,
                terms: selectedShippingTerms,
                destination: customerInfo.port
            });
            
            document.getElementById('summary-vehicle').textContent = selectedCar.name;
            document.getElementById('summary-total').textContent = grandTotal;
            document.getElementById('summary-terms').textContent = selectedShippingTerms;
            document.getElementById('summary-destination').textContent = customerInfo.port || 'Customer Port';
            
            document.getElementById('current-agent-title').textContent = 'üéâ Mission Complete! All Agents Successful';
            
            console.log('Order completion successful!');
        }

        // Navigation functions
        function goBack() {
            document.getElementById('welcome-page').style.display = 'flex';
            document.getElementById('demo-container').classList.remove('active');
            resetDemo();
        }

        function goBackToPreferences() {
            showOnboarding();
        }

        function goBackToNegotiation() {
            document.getElementById('inspection-phase').classList.remove('active');
            document.getElementById('invoice-phase').classList.remove('active');
            document.getElementById('shipping-phase').classList.remove('active');
            document.getElementById('success-phase').classList.remove('active');
            document.getElementById('negotiation-phase').style.display = 'block';
            currentPhase = 'negotiation';
            updateAgentStatus('sparky', true);
            updateProgress(25);
            document.getElementById('current-agent-title').textContent = 'üöÄ Discovering with Sparky';
        }

        function goBackToInspection() {
            document.getElementById('invoice-phase').classList.remove('active');
            document.getElementById('shipping-phase').classList.remove('active');
            document.getElementById('success-phase').classList.remove('active');
            document.getElementById('inspection-phase').classList.add('active');
            currentPhase = 'inspection';
            updateAgentStatus('inspector', true);
            updateProgress(50);
            document.getElementById('current-agent-title').textContent = 'üîç Quality Check with Inspector';
        }

        function goBackToInvoice() {
            document.getElementById('shipping-phase').classList.remove('active');
            document.getElementById('success-phase').classList.remove('active');
            document.getElementById('invoice-phase').classList.add('active');
            currentPhase = 'invoice';
            updateAgentStatus('penny', true);
            updateProgress(75);
            document.getElementById('current-agent-title').textContent = 'üíé Payment Processing with Penny';
        }

        function restartDemo() {
            resetDemo();
            showOnboarding();
        }

        function updateAgentStatus(activeAgent, isActive) {
            // Reset all agents
            document.querySelectorAll('.agent-card').forEach(card => {
                card.classList.remove('active', 'completed');
            });
            
            // Set completed agents based on current phase
            if (activeAgent === 'inspector' || activeAgent === 'penny' || activeAgent === 'captain') {
                document.getElementById('agent-sparky').classList.add('completed');
            }
            if (activeAgent === 'penny' || activeAgent === 'captain') {
                document.getElementById('agent-inspector').classList.add('completed');
            }
            if (activeAgent === 'captain') {
                document.getElementById('agent-penny').classList.add('completed');
            }
            
            // Set active agent
            if (isActive) {
                document.getElementById(`agent-${activeAgent}`).classList.add('active');
            }
        }

        function updateProgress(percentage) {
            document.getElementById('progress').style.width = percentage + '%';
        }

        function resetDemo() {
            currentPhase = 'onboarding';
            selectedMake = '';
            selectedModel = '';
            selectedYear = '';
            selectedMileage = 50000;
            selectedBudget = 25000;
            availableCars = [];
            selectedCar = null;
            currentPrice = 0;
            originalPrice = 0;
            discountApplied = 0;
            negotiationCount = 0;
            selectedShippingTerms = 'FOB';
            customerInfo = {};
            isExistingCustomer = false;
            
            // Reset make/model/year dropdowns
            const makeSelect = document.getElementById('car-make');
            const modelSelect = document.getElementById('car-model');
            const yearSelect = document.getElementById('car-year');
            
            if (makeSelect) makeSelect.value = '';
            if (modelSelect) {
                modelSelect.innerHTML = '<option value="">Any Model</option>';
                modelSelect.value = '';
            }
            if (yearSelect) {
                yearSelect.innerHTML = '<option value="">Any Year</option>';
                yearSelect.value = '';
            }
            
            // Reset range sliders
            document.getElementById('mileage-range').value = 50000;
            document.getElementById('budget-range').value = 25000;
            updateMileageDisplay(50000);
            updateBudgetDisplay(25000);
            
            // Reset preference status indicators
            document.querySelectorAll('.preference-section').forEach(section => {
                section.classList.remove('complete', 'incomplete');
                section.classList.add('incomplete');
            });
            
            // Reset customer info form
            const form = document.getElementById('customer-info-form');
            if (form) {
                form.reset();
            }
            document.querySelectorAll('.term-option').forEach(option => {
                option.classList.remove('selected');
            });
            const firstTerm = document.querySelector('.term-option');
            if (firstTerm) {
                firstTerm.classList.add('selected');
            }
            const fobRadio = document.querySelector('input[value="FOB"]');
            if (fobRadio) {
                fobRadio.checked = true;
            }
            
            // Close any open notifications
            closeNotification();

            // Re-populate car makes dropdown
            populateCarMakes();
            updatePreferenceStatus();
        }

        // Initialize demo on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Initializing Otoz.ai demo...');
            
            // Initialize car database first
            initializeCarDatabase();
            
            // Ensure welcome page is visible initially
            document.getElementById('welcome-page').style.display = 'flex';
            document.getElementById('demo-container').classList.remove('active');
            
            // Populate car makes dropdown
            populateCarMakes();
            
            // Initialize preference status indicators
            updatePreferenceStatus();
            
            // Handle Enter key in negotiation input
            const negotiationInput = document.getElementById('negotiation-input');
            if (negotiationInput) {
                negotiationInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendNegotiationMessage();
                    }
                });
            }
            
            // Initialize customer info form event listener
            const form = document.getElementById('customer-info-form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Collect form data
                    customerInfo = {
                        name: document.getElementById('customer-name').value,
                        email: document.getElementById('customer-email').value,
                        phone: document.getElementById('customer-phone').value,
                        country: document.getElementById('customer-country').value,
                        address: document.getElementById('customer-address').value,
                        port: document.getElementById('destination-port').value,
                        shippingTerms: selectedShippingTerms
                    };
                    
                    // Validate required fields
                    let errors = [];
                    if (!customerInfo.name) errors.push("Full Name is required.");
                    if (!customerInfo.email) errors.push("Email Address is required.");
                    if (!customerInfo.phone) errors.push("Phone Number is required.");
                    if (!customerInfo.country) errors.push("Country is required.");
                    if (!customerInfo.address) errors.push("Full Address is required.");
                    if (!customerInfo.port) errors.push("Destination Port is required.");

                    if (errors.length > 0) {
                        showValidationMessage(errors);
                        return;
                    }
                    
                    // Close popup and generate invoice
                    closeCustomerInfoForm();
                    
                    // Add small delay to ensure popup closes smoothly
                    setTimeout(() => {
                        generateInvoiceWithCustomerInfo();
                    }, 300);
                });
            }
            
            console.log('‚úÖ Demo initialization complete!');
        });
    </script>
</body>
</html>
```
